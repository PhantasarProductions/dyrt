// License Information:
// src/Tricky Script/Script/Subs/SubParty.nil
// Version: 19.08.01
// Copyright (C)  Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information


#say "Loading Party Sub!"
#say "= Importing: libs/tables"
#use "libs/tables"
#say "= Importing: libs/strings"
#use "libs/strings"
#say "= Importing in-game stuff"
#use "Script/Use/Anyway"
#use "Script/Use/Boxes"
#use "Script/Use/BoxPics"



#say "= Starting group!"
group SubParty

	table StatSubs
	table BarBoxes
	
	#say "= Constructor"
	void CONSTRUCTOR()
		self.StatSubs = {
			"BASE_",          // Base stat, defined by level
			"PERMPOWERUP_",   // Some items can give you a permanent powerup. Going up skill levels can also affect this!
			"BUFF_",          // Stat buffs (negative numbers can be used for debuffs)
			"EQUIP_",         // Calculated whenever equipment changes
			"END_"            // End result when all other fields have been added together
		}
	end
	
	string SubCollecto(string stat)
		string ret
		for sub in each(self.StatSubs)
			if sub!="END_" then 
				if ret!="" then ret = ret .."," end //self.SubCollecto = self.SubCollecto .. "," end
				ret = ret .. sub .. stat 
			end
		end
		ret = "SUM:"..ret 
		return ret
	end

	#say "= New Character"
	void NewCharacter(string tag, int level)
		tag=trim(tag)
		assert (level>0,"Level is zero or lower!")
		table lines
		var ch
		ch = RPG.CreateChar(tag)
		self.SetLevelStats(tag,level)
		NIL.Use("Script/Char/Create/"..tag..".nil")
		CSayF("Created new character: %s",tag)
	end
	
	#say "= Set level stats"
	void SetLevelStats(string tag, int level)
		var ch
		table lines
		bool levelfound = false
		int chklevel
		tag = trim(tag)
		ch = RPG.Char(tag)
		ch.Stat("Level").Value=level
		lines = JCR_GetLines(sprintf("Data/LvStats/%s",tag)) //qff.LoadLines(sprintf("Data/LvStats/%s",tag))
		CSayF("Parsing %s lines of LvStat data",#lines)
		for ln,line in ipairs(lines)
			line = Trim(line)
			if line!=""
				table gespleten
				string cmd
				string para
				gespleten = split(line," ")
				cmd =  trim(gespleten[1])
				para = gespleten[2]
				CSayF("%5d   Raw = %s; Instruction = '%s'; Parameter = '%s'; chklevel = %4d (must be %4d)",ln,line,cmd,para,chklevel,level)
				if cmd=="REM"
					// Alright, move along, there's nothing to see here!
				elseif cmd:upper()=="LEVEL"
					chklevel = tonumber(para) or 0
				elseif Left(cmd,5):upper()=="STAT." and chklevel==level
					levelfound=true
					table splitmore
					string stat
					splitmore = split(cmd,".")
					stat = splitmore[2]
					for subs in each(self.StatSubs)
						int v = 0
						if subs=="BASE_" then v = tonumber(para) or 0 end
						if subs=="END_"
							CSayF("Scripting END_%s => %s",stat, self.SubCollecto(stat))
							ch.Stat(sprintf("%s%s",subs,stat))['Script'] = self.SubCollecto(stat)
						else
							ch.Stat(sprintf("%s%s",subs,stat))['Value'] = v
						end
						CSayF("%s has stat %s%s of %d",tag,subs,stat,ch.Stat(sprintf("%s%s",subs,stat)).Value)
					end
				end
			end
		end
		assert(levelfound,("No level data has been found for %s level %d"):format(tag,level))
		ch.Points("HP",true)['MaxCopy'] = "END_HP"
		ch.Points("AP",true)['Maximum'] = level * ({20,10,5})[__skill]
		ch.Points("VIT",true)['Maximum'] = 0 + ((3 - __skill)*100)
		// Not efficient, I know, but this routine only gets called when a new character 
		// is created anyway, and that process only takes place about 11 times in the entire game!
		for p in each({"HP","AP","VIT"})
			ch.Points(p)['Have'] = ch.Points(p)['Maximum']
		end
		for i=0,4
			ch.Points(sprintf("SKILLEXP%d",i),true).Maximum = 1000 * (10^__skill)
			ch.Points(sprintf("SKILLEXP%d",i)     ).Have    = 0
			ch.Points(sprintf("SKILLLVL%d",i),true).Maximum = ({1000,250,100})[__skill]
			ch.Points(sprintf("SKILLLVL%d",i)     ).Have    = 0
		end
	end
	
	#say "= Back Char"
	void BackChar(int num)
		assert(num>4 and num<=8,"Illegal BackChar number")
		self.BarBoxes[num] = self.BarBoxes[num] or new Box( Screen.Width-32, (Screen.Height-128)+((num-5)*32),32,32 )
		self.BarBoxes[num]["Draw"]()
	end
	
	#say "= Char box"
	void Char(int num)
		// Box
		self.BarBoxes[num] = self.BarBoxes[num] or new Box( (num-1)*math.floor((Screen.Width-32)/4),Screen.Height-128,math.floor((Screen.Width-32)/4),128 )
		self.BarBoxes[num]["Draw"]()
		__white
		if RPG.Party[num] and RPG.Party[num]!=""
			// Portrait
			BoxPic(self.BarBoxes[num].x+16,Screen.Height-16,RPG.Party[num])
		end
	end
	
	#say "= Entire bar"
	void CharBar()
		for i=1,8
			switch i
				case 1 2 3 4
					self.Char(i)
				case 5 6 7 8
					self.BackChar(i)
			end
		end
	end

end


#say "Compiling Party Sub!"

