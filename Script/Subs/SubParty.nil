// License Information:
// src/Tricky Script/Script/Subs/SubParty.nil
// Version: 19.07.29
// Copyright (C)  Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information


#use "libs/qff"
#use "libs/tables"
#use "libs/strings"
#use "Script/Use/Anyway"


group SubParty

	table StatSubs
	string SubCollecto
	
	void CONSTRUCTOR()
		StatSubs = {
			"BASE_",          // Base stat, defined by level
			"PERMPOWERUP_",   // Some items can give you a permanent powerup. Going up skill levels can also affect this!
			"BUFF_",          // Stat buffs (negative numbers can be used for debuffs)
			"EQUIP_",         // Calculated whenever equipment changes
			"END_"            // End result when all other fields have been added together
		}
		for sub in each(self.StatSubs)
			if self.SubCollecto!="" then self.SubCollecto = self.SubCollecto .. ","
			self.SubCollecto = self.SubCollecto .. sub
		end
		self.SubCollecto = "SUM:"..self.SubCollecto
	end

	void NewCharacter(string tag, int level)
		assert (level>0,"Level is zero or lower!")
		table lines
		var ch
		ch = RPG.CreateChar(tag)
		self.SetLevelStats(tag,level)
		NIL.Use("Script/Char/Create/"..tag..".nil")
		CSayF("Created new character: %s",tag)
	end
	
	void SetLevelStats(string tag, int level)
		ch = RPG.Char(tag)
		ch.Stat("Level").Value=level
		lines = qff.LoadLines(sprintf("Data/LvStats/%s",tag))
		for line in each(lines)
			line = Trim(line)
			if line!=""
				table gespleten
				string cmd
				string para
				int chklevel
				gespleten = split(line)
				cmd = gespleten[1]:upper()
				para = gespleten[2]
				if cmd=="REM"
					// Alright, move along, there's nothing to see here!
				elseif cmd=="LEVEL"
					chklevel = tonumber(para) or 0
				elseif Left(cmd,5)=="STAT."
					table splitmore
					string stat					
					splitmore = split(cmd,".")
					stat = splitmore[2]
					for subs in each(self.StatSubs)
						int v = 0
						if subs=="BASE_" then v = tonumber(para) or 0 end
						if subs=="END_"
							ch.Stat(sprintf("%s%s",subs,stat)).Script = self.SubCollecto
						else
							ch.Stat(sprintf("%s%s",subs,stat)).Value = v
						end
						CSayF("%s has a base %s of %d",tag,stat,v)
					end
				end
			end
		end
		ch.Points("HP",true).MaxCopy = "END_HP"
		ch.Points("AP",true).MaxCopy = "END_AP"
		ch.Points("VIT",true).Maximum = 0 + ((3 - __skill)*100)
		// Not efficient, I know, but this routine only gets called when a new character 
		// is created anyway, and that process only takes place about 11 times in the entire game!
		for p in each({"HP","AP","VIT"})
			ch.Points(p).Have = ch.Points(p).Maximum
		end
		for i=0,4
			ch.Points(sprintf("SKILLEXP%d",i),true).Maximum = 1000 * (10^__skill)
			ch.Points(sprintf("SKILLEXP%d",i)     ).Have    = 0
			ch.Points(sprintf("SKILLLVL%d",i),true).Maximum = ({1000,250,100])[__skill]
			ch.Points(sprintf("SKILLLVL%d",i)     ).Have    = 0
		end
	end

end


