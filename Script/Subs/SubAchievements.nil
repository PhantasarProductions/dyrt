// License Information:
// src/Tricky Script/Script/Subs/SubAchievements.nil
// Version: 20.08.12
// Copyright (C) 2019, 2020 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "libs/LinkedList"
#use "libs/strings"
#use "libs/tables"
#use "script/use/anyway"
#use "script/use/boxes"

var AchData

quickmeta group qmAward
	
	index
		return gv.Bool["AWARDED."..key]
	end
	
	newindex
		assert(type(value)=="boolean","Achievements awarded table requires boolean values!")
		gv.Bool["AWARDED."..key] = value
	end
	
end

class AchBox

	//link AchData = AchData
	static var BoxList
	static var Font
	static var TxAwarded
	static var SysFont
	link Awarded = qmAward
	
	table Achievement
	int y
	var Box
	var TxAchName
	string tag
	
	static void QuickList()
		for k,v in pairs(AchData)
			CWriteLine(sprintf("%s %s",type(v),k),255,180,0)
		end
	end
	
	void CONSTRUCTOR(string tag)
		tag = trim(tag) 
		//CWriteLine("Creating achievement box: "..tag,255,180,0) CSay(NIL.LuaSerialize("Achievements",AchData)) CWriteLine("Ok?",180,0,255) // debug line
		self.QuickList()
		//CSay("= WTF? "..tostring(AchData[tag]))
		assert(AchData[tag],"No achievement named `"..tag.."`")
		CSay("= Game Jolt Check")
		if GameJolt.Award(tag)
			CSay("= Contacting Game Jolt was succesful!")
		else
			CSay("= Contacting Game Jolt failed")
		end
		CSay("= Configuring Box!")
		self.Achievement = AchData[tag]
		self.y = Screen.Height+25
		self.Box = new Box(50,self.y,Screen.Width-100,70)
		self.TxAchName = self.Font.Text(self.Achievement.Name)
		self.tag=tag
		CSay("Listing Box")
		self.BoxList.AddLast(self)
		CSay("= Re-adjusting y")		
		for ab in self.BoxList.Each			
			if ab.y>=self.y-25
				#+ self.y 150
			end
		end			
		CSay("Registering!")
		self.Awarded[tag] = true
		CSayF("Achievement earned: %s",tag)
	end
	
	void DESTRUCTOR()
		self.Box = nil;
		self.TxAchName = nil;
		CSayF("Achievement box for '%s' has been removed from the memory!",self.tag)
	end
	
	void Draw()
		self.Box.Draw()
		Color(255,180,0)
		self.TxAwarded.Draw(Screen.Width/2,self.y+7,2,2)
		__white
		self.TxAchName.Draw(Screen.Width/2,self.y+25,2,2)
	end
	
	static void DrawAll()
		for ach,lnk in self.BoxList.Each
			ach.y--
			ach.Box.y=ach.y
			ach.Draw()
			if ach.y<-100
				CSayF("Unlinking achievement '%s'",ach.tag)
				lnk.UnLink()
			end
		end
	end
end

group F_Achievements

	//void Draw()
	//end
	
	//void Update()
	//end
	
	link AchData = AchData
	link Awarded = qmAward
	link DrawAll = AchBox.DrawAll
	
	void CONSTRUCTOR()
		Box.NeverList = true
		AchBox.BoxList = new TLinkedList
		AchBox.SysFont = GetFont("SYSFONT")
		AchBox.TxAwarded = AchBox.SysFont.Text("Achievement obtained!")
		AchBox.Font = GetFont("BIGTEXT")
		AchData = NIL.Use("Script/Data/General/Achievements.nil")
	end
	
	bool Allow(tag)
		bool allowchat = false
		bool ret = true
		var a
		void AChat(infinity)
			if not allowchat then return end
			string saysomething
			for _,s in ipairs{infinity} do saysomething = saysomething .. tostring(s) end
			CSay(saysomething)
		end
		a = AchData[tag]
		AChat("Is achievement ",tag," allowed?")
		if a.require_gamejolt
			ret = ret and gv.Bool.GameJolt
			AChat("= Game Jolt required.... GameJolt Active = ",gv.Bool.GameJolt," so ret = ",ret)
		end
		if a.skill_check
			ret = ret and a["skill_"..__skill]
			AChat("= Based on skill! Skill is ",__skill,"; Allowed on this skill is: ",a["skill_"..__skill],", so ret = ",ret)
		end
		if not a.allow_trueabyss
			ret = ret and (not __trueabyss)
			AChat("= Achievement NOT allowed in the true abyss... Are we in the true abyss? ",__trueabyss,"..... So ret must be ",ret)
		elseif a.only_trueabyss
			ret = ret and __trueabyss
			AChat("= Achievement ONLY allowed in the true abyss... Are we in the true abyss? ",__trueabyss,"..... So ret must be ",ret)
		end
		return ret
	end
	
	void Award(string tag)
		tag = tag:upper()
		if self.Awarded[tag]
			return
		end
		new AchBox(tag)
	end
	
	// This reset feature has to prevent slowdowns
	int AutoCD      = 4000
	int AutoCDReset = 4000
	void Auto(always)
		if always or $AutoCD==0
			CSay("Auto achievement timer triggered!")
			$AutoCD=$AutoCDReset
			for tag,a in pairs($AchData)
				if a.ProcessValue!="" 
					CSayF("Tag '%s'; Wanted gv.Num.%s; Contains %9d; Must be at least: %9d; Awarded: %s; Allowed: %s",tag,a.ProcessValue,gv.Num[a.ProcessValue],a.ProcessMax,tostring(self.Awarded[tag]),tostring(self.Allow(tag)))
					if a.ProcessMax<=gv.Num[a.ProcessValue] and (not self.Awarded[tag]) and self.Allow(tag)
						CSay("=> Awarded!")
						$Award(tag)
					end
				end
			end
		else
			$AutoCD--
		end
	end
	
	void AutoCheck()
		CSayF("Auto achievement countdown is %4d/%4d",$AutoCD,$AutoCDReset)
	end
	
	int ovScrollY=0
	void Overview(int x,int y, int w, int h)
		int wy
		wy = 0-$ovScrollY
		for tag,data in spairs($AchData)
			if self.Allow(tag) and ((not data.hidden) or self.Awarded[tag])
				if wy>=0 and wy<(y+h)-70
					Color(0,180,255)
					AchBox.Font.DrawText(data.Name,x+5,wy+y)
					__white
					AchBox.SysFont.DrawText(data.Description,x+5,wy+35+y)
					if $Awarded[tag]
						Color(0,255,0)
						AchBox.SysFont.DrawText("Obtained!",(x+w)-10,wy+30+y,1)
					elseif data.ProcessValue!="" 
						Color(255,180,0)
						AchBox.SysFont.DrawText(replace(replace(data.ProcessString,"{Value}",sprintf("%d",gv.Num[data.ProcessValue])),"{Max}",tostring(data.ProcessMax)),(x+w)-10,wy+30+y,1)
					end
				end
				wy = wy + 70
			end
		end
		// AchBox.SysFont.DrawText(sprintf("Mouse(%4d,%d) -> %s    %s <-   press: %s",Mouse.X,Mouse.Y,tostring(Mouse.X>x), tostring(Mouse.X<x+w) , tostring( Mouse.HeldLeft ) ),50,50)
		if Mouse.X>x and Mouse.X<x+w and Mouse.HeldLeft
			//CSayF("Above bottom: %s; Below top %s; Past Half: %s; Before half: %s; Not at end: %s; At start: %s",
			//	tostring(Mouse.Y<y+h),
			//	tostring(Mouse.Y>y),
			//	tostring(Mouse.Y>y+(h/2)),
			//	tostring(Mouse.Y<y+(h/2)),
			//	tostring(wy>=(y+h) ),
			//	tostring( $ovScrollY>0))
			if   Mouse.Y<y+h and Mouse.Y>y+(h/2) and wy>=(y+h)  
				$ovScrollY = $ovScrollY + 70
			elseif Mouse.Y>y and Mouse.Y<y+(h/2) and $ovScrollY>0
				$ovScrollY = $ovScrollY - 70
			end
		end
	end
end

//delegate BUB_Draw
//delegate BUB_Update

//BUB_Draw   = F_Achievements.Draw
//BUB_Update = F_Achievements.Update