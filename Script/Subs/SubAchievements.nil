// License Information:
// src/Tricky Script/Script/Subs/SubAchievements.nil
// Version: 19.11.17
// Copyright (C)  Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
#use "libs/LinkedList"
#use "libs/strings"
#use "script/use/anyway"
#use "script/use/boxes"

var AchData

quickmeta group qmAward
	
	index
		return gv.Bool["AWARDED."..key]
	end
	
	newindex
		assert(type(value)=="boolean","Achievements awarded table requires boolean values!")
		gv.Bool["AWARDED."..key] = value
	end
	
end

class AchBox

	//link AchData = AchData
	static var BoxList
	static var Font
	static var TxAwarded
	link Awarded = qmAward
	
	table Achievement
	int y
	var Box
	var TxAchName
	string tag
	
	static void QuickList()
		for k,v in pairs(AchData)
			CWriteLine(sprintf("%s %s",type(v),k),255,180,0)
		end
	end
		
	void CONSTRUCTOR(string tag)
		tag = trim(tag) 
		//CWriteLine("Creating achievement box: "..tag,255,180,0) CSay(NIL.LuaSerialize("Achievements",AchData)) CWriteLine("Ok?",180,0,255) // debug line
		self.QuickList()
		//CSay("= WTF? "..tostring(AchData[tag]))
		assert(AchData[tag],"No achievement named `"..tag.."`")
		CSay("= Game Jolt Check")
		if GameJolt.Award(tag)
			CSay("= Contacting Game Jolt was succesful!")
		else
			CSay("= Contacting Game Jolt failed")
		end
		CSay("= Configuring Box!")
		self.Achievement = AchData[tag]
		self.y = Screen.Height+25
		self.Box = new Box(50,self.y,Screen.Width-100,70)
		self.TxAchName = self.Font.Text(self.Achievement.Name)
		self.tag=tag
		CSay("Listing Box")
		self.BoxList.AddLast(self)
		CSay("Registering!")
		self.Awarded[tag] = true
		CSayF("Achievement earned: %s",tag)
	end
	
	void DESTRUCTOR()
		self.Box = nil;
		self.TxAchName = nil;
		CSayF("Achievement box for '%s' has been removed from the memory!",self.tag)
	end
	
	void Draw()
		self.Box.Draw()
		Color(255,180,0)
		self.TxAwarded.Draw(Screen.Width/2,self.y+7,2,2)
		__white
		self.TxAchName.Draw(Screen.Width/2,self.y+25,2,2)
	end
	
	static void DrawAll()
		for ach,lnk in self.BoxList.Each
			ach.y--
			ach.Box.y=ach.y
			ach.Draw()
			if ach.y<-100
				CSayF("Unlinking achievement '%s'",ach.tag)
				lnk.UnLink()
			end
		end
	end
end

group F_Achievements

	//void Draw()
	//end
	
	//void Update()
	//end
	
	//link AchData = AchData
	link Awarded = qmAward
	link DrawAll = AchBox.DrawAll
	
	void CONSTRUCTOR()
		Box.NeverList = true
		AchBox.BoxList = new TLinkedList
		AchBox.TxAwarded = GetFont("SYSFONT").Text("Achievement obtained!")
		AchBox.Font = GetFont("BIGTEXT")
		AchData = NIL.Use("Script/Data/General/Achievements.nil")
	end
	
	void Award(string tag)
		tag = tag:upper()
		if self.Awarded[tag]
			return
		end
		new AchBox(tag)
	end
	
end

//delegate BUB_Draw
//delegate BUB_Update

//BUB_Draw   = F_Achievements.Draw
//BUB_Update = F_Achievements.Update


