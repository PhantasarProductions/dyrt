// License Information:
// src/Tricky Script/Script/Subs/SubGameVar.nil
// Game Vars
// version: 20.04.28
// Copyright (C) 2019 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information





#say "Loading GameVar"
bool GAMEVARSCRIPT = true

#say "GV: Importing libraries"
#use "Libs/tables"
#use "Libs/strings"

table varBool
table varString
table varNum
table varAll 
table varType
table varDef

#say "GV: predefs"
// I'll do this in "pure" Lua.
// NIL inevitably comes with a few limitations, and the code below is just one of them
// (still doesn't outrank the benefits, so...)
#pure
varAll = {varBool,varString,varNum}
varType = { Bool=varBool,String=varString,Num=varNum }
varDef = { Bool=false, String="",Num=0 }
#endpure

#say "GV: Clear"
global void varClear(bool onlydefs)
	for Type,v in pairs(varType) 
		table temp
		for k,_ in pairs(v) 
			temp[#temp+1]=k
		end
		for ik in each(temp)
			if (not onlydefs) or varDef[Type]==v[ik] 
				v[ik]=nil;
			end
		end
	end
end


#say "GV: Get"
global void varGet(string vType,string vName)
	var v
	v = varType[trim(vType)][trim(vName)]
	if v==nil then v=varDef[trim(vType)] end
	SuperGlobal.VarCommunicate = tostring(v)
end

#say "GV: Set"
global void varSet(string vType,string vName, vValue)
	varType[trim(vType)][trim(vName)] = trim(tostring(vValue))
end

#say "GV: Done"
global void varDone(string vName)
	varGet("Bool",trim(vName))
	varSet("Bool",trim(vName),true)
end

#say "GV: Serialize"
global void varSerialize()
	// None of the pures where needed, but as .NET keeps coming up with
	// Nonsensical "out of memory" errors, I'll have to force my way past
	// things, and since the code would be the same in both Lua and NIL
	// Well, who cares anyway....
	string ret
	ret = "// Booleans\n"
	#say "GV: Serialize -> Bool shit"
	for k,v in spairs(varBool)
		#pure
		ret = ret .. sprintf("gv.Bool[\""..SafeString(k).."\"] = %s\n",v)
		#endpure
	end
	ret = ret .. "\n// Numbers\n"
	#say "GV: Serialize -> Numbering issues"
	for k,v in spairs(varNum)
		#pure
		ret = ret .. sprintf("gv.Num[\""..SafeString(k).."\"] = %s\n",v)
		#endpure
	end
	ret = ret .. "\n// Strings\n"
	#say "GV: Serialize -> Nobody pulls my strings"
	for k,v in spairs(varString)
		ret = ret .. "gv.String[\"" .. SafeString(k) .. "\"] = \"" .. SafeString(v) .. "\"\n"
	end
	SuperGlobal.VarCommunicate = ret
end

#say "GV: Sub"
global void varSub(string str) 
	//-- Sub means "substitute"
	#say "GV: Sub.Init!"
	string ret 
	ret = str
	#say "GV: Sub.Boolean"
	for k,v in spairs(varBool)
		ret = replace(ret,"&"..k,tostring(v))
	end
	#say "GV: Sub.Num"
	for k,v in spairs(varNum)
		ret = replace(ret,"%%"..k,tostring(v))
	end
	#say "GV: Sub.String"
	for k,v in spairs(varString)
		ret = replace(ret,"$"..k,v)
	end
	#say "GV: Sub.VarCommunicate"
	SuperGlobal.VarCommunicate = ret
end

#say "GV: Compiling!"