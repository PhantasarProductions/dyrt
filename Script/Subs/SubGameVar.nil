// License Information:
// src/Tricky Script/Script/Subs/SubGameVar.nil
// Game Vars
// version: 19.07.15
// Copyright (C)  Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

bool GAMEVARSCRIPT = true

#use "Libs/tables"
#use "Libs/strings"

table varBool
table varString
table varNum
table varAll 
table varType
table varDef

varAll = {varBool,varString,VarNum}
varType = { Bool=varBool,String=varString,Num=varNum }
varDef = { Bool=false, String="",Num=0 }

global void varClear(bool onlydefs)
	for k,v in pairs(varType) 
		table temp
		for k,_ in pairs(v) 
			temp[#temp+1]=k
		end
		for ik in each(temp)
			if (not onlydefs) or varDef[Type]==v[ik] 
			v[ik]=nil;
		end
	end
end


global void varGet(string vType,string vName)
	var v
	v = varType[vType][vName]
	if v==nil then v=varDef[vType] end
	SuperGlobal.varCommunicate = v 
end

global void varSet(string vType,string vName, vValue)
	varType[vType][vName] = vValue
end

global void varDone(string vName)
	varGet("Bool",vName)
	varSet("Bool",vName,true)
end

global void varSerialize()
	string ret
	ret = "// Booleans\n"
	for k,v in spairs(varBool)
		ret = ret + sprintf("gv.Bool[\"%s\"] = %s\n",SafeString(k),v)
	end
	ret = ret + "\n//Numbers\n"
	for k,v in spairs(varNum)
		ret = ret + sprintf("gv.Num[\"%s\"] = %s\n",SafeString(k),v)
	end
	ret = ret + "\n//Strings\n"
	for k,v in spairs(varNum)
		ret = ret + sprintf("gv.String[\"%s\"] = \"%s\"\n",SafeString(k),SafeString(v))
	end
	SuperGlobal.VarCommunicate = ret
end

