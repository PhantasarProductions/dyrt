// License Information:
// src/Tricky Script/Script/Flow/FieldMenu.nil
// Version: 20.02.08
// Copyright (C)  Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "Script/Use/Anyway"
#use "Script/Use/Boxes"
#use "Script/Use/BoxPics"
#use "Script/Use/AutoHelp"
#use "Script/Use/EquipRecalc"
#use "libs/tables"
#use "libs/DarkText"
#use "libs/Roman"
#use "libs/DateTime"

#macro __TopBarHeight 55


table I_ELEM
table I_STAT

I_ELEM = {
//	"None", // invisible
	"Flame",
	"Wind",
	"Water",
	"Earth",
	"Frost",
	"Thunder",
	"Light",
	"Darkness"
}

I_STAT = {
	"Poison",
	"Disease",
	"Silence",
	"Paralysis",
	"Sleep",
	"Exhaustion",
	"Confusion",
	"Fear",
	"Death",
	"Destruction",
	"Zombie"
}




group Flow_FieldMenu

	table situations
	string situation
	
	delegate LM_Action
	var LM_ActionArgs

	
	var ItemHover
	
	var BigFont
	var Font
	var BlitzFont
	
	var TopBox
	var LeftBox
	var RightBox
	
	table BaseStats
	
	link CharNum = Party.SelectedCharacter
	get string CharTag 
		//CSayF("Getting Chartag %d!",$CharNum)
		return RPG.Party[$CharNum]
	end
	
	string strstat(string chtag,string stat)
		if chtag=="Shanda"
			return "???"
		end
		if chtag=="Kirana"
			switch stat
				case "Strength"
					return "Weak"
				case "Defense"
					return "Fragile"
				case "Intelligence"
					return "Dumb"
				case "Resistance"
					return "Awful"
				case "Agility"
					return "Fast (if afraid)"
				case "Accuracy"
					return "Miss"
				case "Evasion"
					return "Hard to miss"
				default
					return "Terrible"
			end
		end
		string ch 
		int s 
		ch = RPG.Char(chtag)
		s = ch.Stat("END_"..stat).Value
		return sprintf("%5d",s)
	end
	
	void Quit()
		if Yes("Do you really want to quit?")
			Bye()
		end
	end
	
	void BasePanel(ubox)
		var ch
		int m=3
		int xy
		int level
		//CSay("...")
		//CSay("CHARTAG = "..$CharTag)
		__white
		ch = RPG.Char($CharTag)
		ubox = ubox or $LeftBox
		BoxPic(ubox.x+10,ubox.y+10,$CharTag,"GENERAL","top")
		__amber
		DarkText.Font($BigFont,ch.Name,ubox.x+125, ubox.y+15)
		if __skill==3 
			m=2
		end
		for i=1,m
			LuaDoString("PARTY",sprintf("SubParty.BigPointsBar(trim(\"%s\"), %d, %d, %d, %d)",$CharTag,i,ubox.x+125,ubox.y+40+(i*20),ubox.w-150))
		end
		for i,s in ipairs($BaseStats)
			__white
			xy = (ubox.y+120)+(i*15)
			DarkText.Font($Font,s,ubox.x+10,xy)
			__amber
			DarkText.Font($Font,$strstat($CharTag,s),(ubox.x+ubox.w)-10,xy,1)
		end
		xy = xy + 30
		__white
		level = ch.Stat("Level").Value
		DarkText.Font($Font,"EXP to next level:",ubox.x+10,xy)
		DarkText.Font($Font,"Level:",ubox.x+10,xy+20)
		if level>=__levelcap or $CharTag=="Kirana" or $CharTag=="Shanda"
			__red
			DarkText.Font($Font,"---",(ubox.x+ubox.w)-10,xy,1)
			if $CharTag=="Kirana" or $CharTag=="Shanda"
				__skyblue
			elseif level==__levelcap
				__amber
			end
		else
			__amber
			DarkText.Font($Font,tostring(ch.Stat("Experience").Value),(ubox.x+ubox.w)-10,xy,1)
			__green
		end
		DarkText.Font($Font,Roman(ch.Stat("Level").Value),(ubox.x+ubox.w)-10,xy+20,1)
		__white
		DarkText.Font($Font,"Weapon",(ubox.x+10),(ubox.ey-70))
		DarkText.Font($Font,"Armor",(ubox.x+10),(ubox.ey-50))
		DarkText.Font($Font,"Jewelry",(ubox.x+10),(ubox.ey-30))
		__amber
		DarkText.Font($Font,Item[ch.Data.Weapon].Name,(ubox.x+math.floor(ubox.w*0.25)),ubox.ey-70)
		DarkText.Font($Font,Item[ch.Data.Armor].Name,(ubox.x+math.floor(ubox.w*0.25)),ubox.ey-50)
		if ch.Data.Jewel==""
			DarkText.Font($Font,"---",(ubox.x+math.floor(ubox.w*0.25)),ubox.ey-30)
		else
			DarkText.Font($Font,Item[ch.Data.Jewel].Name,(ubox.x+math.floor(ubox.w*0.25)),ubox.ey-30)
		end
		if Mouse.X>ubox.x and Mouse.X<ubox.ex and Mouse.Y>ubox.ey-70 and Mouse.Y<ubox.ey-50 
			$InvItemHover = Item[ch.Data.Weapon]
			$GenIAAHelp()
		elseif Mouse.X>ubox.x and Mouse.X<ubox.ex and Mouse.Y>ubox.ey-50 and Mouse.Y<ubox.ey-30 
			$InvItemHover = Item[ch.Data.Armor]
			$GenIAAHelp()
		elseif Mouse.X>ubox.x and Mouse.X<ubox.ex and Mouse.Y>ubox.ey-30 and Mouse.Y<ubox.ey-10 
			$InvItemHover = Item[ch.Data.Jewel]
			$GenIAAHelp()
		end
	end
	
	void NotYetImplemented(ubox)
		int cx
		int cy
		cx = ubox.x+(ubox.w/2)
		cy = ubox.h+(ubox.h/2)
		__red
		DarkText.Font($BigFont,"The requested feature has",cx,cy-25,2)
		DarkText.Font($BigFont,"not yet been implemented!",cx,cy+25,2)
	end
	
	void Status(ubox)
		var ch
		int x
		int y
		int w
		x = ubox.x
		y = ubox.y
		w = ubox.w
		ch = RPG.Char($CharTag)
		ch.Points("SKILLLVL0").Minimum = 1
		for i=0,4
			if ch.Points("SKILLLVL"..i).Have>0
				int ty
				ty = (y+10)+(i*20)
				Color(100,100,100)
				Rect(x+10,ty+10,w-20,10)
				__red
				Rect(x+10,ty+10,math.floor( (ch.Points("SKILLEXP"..i).Have/ch.Points("SKILLEXP"..i).Maximum) * (w-20) ), 10 )
				__white
				DarkText.Font($Font,ch.Data["SKILL"..i],x+10, ty)
				__amber
				DarkText.Font($Font,Roman(ch.Points("SKILLLVL"..i).Have),(x+10)+(w-20),ty,1)
			end
		end
		
		for i,elem in ipairs(I_ELEM)
			int ty
			ty = (y+200)+(i*20)
			__white
			DarkText.Font($Font,sprintf("%s resistance",elem),x+10,ty)
			__amber
			DarkText.Font($Font,ch.Stat( sprintf("END__RESIST_Elem_%s",elem) ).Value.."%",(x+10)+(w-20),ty,1)
		end

		for i,stat in ipairs(I_STAT)
			int ty
			ty = (y+450)+(i*20)
			__white
			DarkText.Font($Font,sprintf("%s resistance",stat),x+10,ty)
			__amber
			DarkText.Font($Font,ch.Stat( sprintf("END__RESIST_Stat_%s",stat) ).Value.."%",(x+10)+(w-20),ty,1)
		end
		
	end
		
	int InvItemScrollY = 0
	var InvItemHover
	var InvItemList
	var InvItemLastHelp
	
	void GenIAAHelp()
		var Help		
		var HV
		HV = self.InvItemHover
		if $InvItemLastHelp and $InvItemLastHelp.Hover==$InvItemHover 
			ShowAutoHelp($InvItemLastHelp.Help)
			return
		end
		$InvItemLastHelp = { ['Hover'] = $InvItemHover, ['Help'] = {} }
		Help = $InvItemLastHelp.Help
		Help[#Help+1] = $InvItemHover.Name
		Help[#Help+1] = $InvItemHover.Description
		
		with HV
			if $Type=="Item"
				Help[#Help+1] = "Item type: "..$ItemType
				for i=1,8 do
					string c
					c = RPG.Party[i]
					if c and c!=""
						//Help[#Help+1] = "Checking: "..c
						// Help[#Help+1] = sprintf("Eq%s = %s",c,HV["Eq"..c])
						if HV["Eq"..c]
							Help[#Help+1] = "Can be equipped by: "..RPG.GetChar(c).Name
						end
					end
				end
			end
			if $Heal and $Heal>0 
				switch $HealType
					case "Absolute"
						Help[#Help+1]=sprintf("Heals %d HP",$Heal)
					case "Percent"
						Help[#Help+1]=sprintf("Heals %d%% of max HP",$Heal)
					case "Stat"
						Help[#Help+1]=sprintf("Heals several HP. Modifier based on %s",$HealStat)
					default
						Help[#Help+1]=sprintf("Unknown healing specifier! You've likely encountered a bug: %s",$HealType)
				end
			end
			if $Attack and $Attack>0
				Help[#Help+1] = sprintf("%s attack, power %3d%% of %s, against target's %s",$AttackType,$Attack,$AttackStat,$DefenseStat)
				if $Element and $Element!="" and $Element!="None"
					Help[#Help+1] = sprintf("- Attack based on element %s",$Element)
				end
				if $AttackCancel
					Help[#Help+1] = sprintf("- Cancel effect")
				end
			end
			
		end
		for k,v in spairs($InvItemHover)
			if prefixed(k,"Cause") and v
				Help[#Help+1]="Causes "..Right(k,#k-5)
			elseif prefixed(k,"Cure") and v
				Help[#Help+1]="Cures "..Right(k,#k-4)
			end
		end
	end
	
	void Items(ubox)
		int y 
		y = -$InvItemScrollY
		$InvItemList = $InvItemList or NIL.Use("Script/Use/iaalist.nil")
		//Viewport(ubox.x,ubox.y,ubox.w,ubox.h) // Microsoft messed this up! Cool, huh?
		$InvItemHover = nil;
		for itemtag in each($InvItemList)
			int ind = 0
			if Inventory[itemtag]>0
				if y>=0 and y+35<ubox.h 
					if $situations[$situation].ItemSellPrice and Item[itemtag].Sellable
						Color(0,180,255)
						DarkText.Font($BlitzFont,sprintf("Sell price: %9d shilders",math.ceil(Item[itemtag].BuyPrice/__skill)),ubox.x+math.floor((ubox.w-40)/2),ubox.y+y+4)
					end
					if Mouse.X>ubox.x and Mouse.Y>y+ubox.y and Mouse.X<ubox.x+ubox.w and Mouse.Y<y+20+ubox.y
						$InvItemHover = Item[itemtag]
						#pure
						--[[
						$ItemHover = $ItemHover or {}
						$ItemHover.InvItem = $InvItemHover
						$ItemHover.TagItem = itemtag
						$ItemHover.Action  = $situations[$situation].ItemAction
						]]
						#endpure
						$LM_Action		= $situations[$situation].ItemAction
						$LM_ActionArgs	= itemtag
						Color(100,180,255)
						ind = 5
					else
						__white
					end
					DarkText.Font($Font,Item[itemtag].Name or sprintf("Unnamed item <<%s>>",itemtag),ubox.x+5+ind,ubox.y+y)
					__amber
					DarkText.Font($Font,sprintf("%5d",Inventory[itemtag]),ubox.x+ubox.w-40,ubox.y+y)
				end
				y = y + 20
			end
		end
		if $InvItemHover
			$GenIAAHelp()
		else 
			//$ItemHover = nil;
		end
		//Viewport()
	end
	
	void Abilities(ubox)
		var abls
		int y
		var ch
		abls = NIL.Use("Script/Char/Ability/"..self.CharTag)
		ch = RPG.GetChar(self.CharTag)
		y = 5
		for tag,need in spairs(abls)
			int ind = 0
			string stag
			bool hovering
			stag = "ABL_HERO_"..self.CharTag.."_"..tag
			hovering = Mouse.X>ubox.x and Mouse.Y>y+ubox.y and Mouse.X<ubox.x+ubox.w and Mouse.Y<y+19+ubox.y
			if AbilitiesMastered[self.CharTag][tag]
				if hovering
					//$ItemHover = $ItemHover or {}
					//$ItemHover.InvItem = $InvItemHover
					//$ItemHover.TagItem = stag
					//$ItemHover.Action  = $situations[$situation].AblAction
					$InvItemHover=Item[stag]
					$GenIAAHelp()
					ShowAutoHelp($InvItemLastHelp.Help)
					$LM_Action		= $situations[$situation].AblAction
					$LM_ActionArgs	= stag
					Color(100,180,255)
					ind = 5
				else
					__white
				end
				DarkText.Font($Font,Item[stag].Name or sprintf("Unnamed ability <<%s>>",tag),ubox.x+5+ind,ubox.y+y)
				if Item[stag].AP_Cost and Item[stag].AP_Cost>0
					Color(0,180,255)
					DarkText.Font($Font,tostring(Item[stag].AP_Cost),ubox.x+ubox.w-10,ubox.y+y,1)
				end
			elseif need.Start
				//$ItemHover = nil;
				AbilitiesMastered[self.CharTag][tag] = true
			else
				//$ItemHover = nil;
				if hovering
					Color(170,170,107)
					DarkText.Font($Font,"?????",ubox.x+5+5,ubox.y+y)
				else
					Color(127,127,127)
					DarkText.Font($Font,"?????",ubox.x+5,ubox.y+y)
				end
				if hovering
					table Help
					Help = {"In order to unlock this ability you need:"}
					$InvItemLastHelp = { ['Help'] = Help }
					for k,v in spairs(need)
						switch k
							case "Scharum"
								Help[#Help+1] = "= To defeat Scharum"
							case "SealedBoss"
								Help[#Help+1] = "= To defeat a certain sealed boss"
							case "BoolVar" "NumVar"
								Help[#Help+1] = "= To have reached a certain spot in the scenario"
							case "Charm"
								if #v==1
									Help[#Help+1] = "= To charm a "..v[1]
								else
									string q
									for chi,chf in ipairs(v)
										if chi==#v
											q = q .. " or "
										elseif chi!=1
											q = q .. ", "
										end
										q = q .. chf
									end
									Help[#Help+1] = "= To charm a "..q
								end
							default
								if prefixed(k,"Skill_")
									bool found
									for i=0,4 do
										found = found or ch.Points(sprintf("SKILLLVL%d",i)).Have>0 and prefixed(ch.Data[sprintf("SKILL%d",i)],right(k,#k-6))
									end
									if found
										Help[#Help+1] = "= To have "..right(k,#k-6).." on level ".. Roman(v) .." or higher"
									else
										Help[#Help+1] = "= ????"
									end
								end
						end
					end
					ShowAutoHelp(Help)
				end
			end
			y = y + 20
		end
	end
	
	void ViewAchievements(ubox)
		Achievements.Overview(ubox.x,ubox.y,ubox.w,ubox.h)
	end
	
	void PerformBuy(string tag)
		if Inventory[tag]>=__itemcap
			CSayF("Cannot buy %s ... Overloaded %2d/%2d",tag,Inventory[tag],__itemcap)
			return
		end
		if __cash<Item[tag].BuyPrice
			CSayF("Cannot buy %s ... Not enough money (%9d; need %9d)",tag,__cash,Item[tag].BuyPrice)
			return
		end
		CSayF("Buying %s",tag)
		Inventory[tag]++
		#- __cash Item[tag].BuyPrice
	end
	
	string CurrentStore
	var CurrentStock
	void StoreBuy(ubox)
		var Stock
		self.CurrentStock = self.CurrentStock or NIL.Use(sprintf("Script/Data/Stores/%s",self.CurrentStore) )
		Stock = self.CurrentStock // I am lazy!
		__amber
		DarkText.Font($Font,Stock.Name,ubox.x+10,ubox.y+10)
		int y
		y = ubox.y + 40
		for i=1,20
			string tag
			var itmd
			bool hover
			tag = Stock[sprintf("Stock%02d",i)]
			if tag and tag!="" and tag!="--"
				int idnt = 10
				hover = Mouse.X>ubox.x and Mouse.Y>y and Mouse.X<ubox.x+ubox.w and Mouse.Y<y+20
				itmd = Item[tag]
				__white
				if hover 
					idnt = 15
					Color(120,180,255)
					$InvItemHover=Item[tag]
					$GenIAAHelp()
					ShowAutoHelp($InvItemLastHelp.Help)
					$LM_Action		= self.PerformBuy
					$LM_ActionArgs	= tag

				end
				DarkText.Font($Font,itmd.Name,ubox.x+idnt,y)
				__amber
				DarkText.Font($Font,tostring(Inventory[tag]),(ubox.x+ubox.w)-idnt,y,1)
				Color(0,180,255)
				DarkText.Font($BlitzFont,sprintf("Buy price: %9d shilders",Item[tag].BuyPrice),ubox.x+math.floor((ubox.w-40)/2),y)
				#+ y 20
			end
		end
		__white
		DarkText.Font($BlitzFont,sprintf("Cash: %9d shilders",__cash),ubox.x+5,(ubox.y+ubox.h)-15)
	end
	
	string SwitchHover
	void JustSwitch()
		if $SwitchHover==""
			return
		end
		string swp
		swp = $CharTag
		int i1
		int i2
		for i = 1,8
			if RPG.Party[i]==swp
				i1 = i
			elseif RPG.Party[i]==$SwitchHover
				i2 = i
			end
		end
		RPG.Party[i2]=swp
		RPG.Party[i1]=$SwitchHover
		// TODO: Link back in the case of combat
	end
	
	void Switch(ubox)
		var sit
		sit = $situations[$situation]
		int s_min
		int s_max
		s_min = (sit.SwitchRange or {})[1] or 1
		s_max = (sit.SwitchRange or {})[2] or 8
		int y 
		int x 
		x = ubox.x + 10
		y = ubox.y + 10
		$SwitchHover = ""
		for i = s_min,s_max
			__white
			string tag
			bool allow
			tag = RPG.Party[i] or ""
			allow = tag != $CharTag and tag != "" and tag != "Shanda" and tag !="Kirana"
			if allow
				GraphColor.Alpha = 255
				if Mouse.X>x and Mouse.Y>y and Mouse.X<x+100 and Mouse.Y<y+100
					$LM_Action		 = self.JustSwitch
					$SwitchHover = tag
				end
			else
				GraphColor.Alpha = 50
			end
			BoxPic(x,y,tag,"GENERAL","top")
			GraphColor.Alpha = 255
			#+ y 100
			if y+100 > ubox.y+ubox.h
				y = ubox.y + 10
				#+ x 100
			end
		end
	end
	
	void FieldItemAction(string TagItem)
		CSayF("%s wants to use %s",$CharTag,TagItem)		
		var it
		var ch
		TagItem = TagItem:upper()
		it = Item[TagItem]
		ch = RPG.GetChar($CharTag)
		switch it.ItemType
			case "Weapon" "Armor" "Jewel"
				if not it["Eq"..$CharTag]
					Annoy(ch.Name.." cannot equip that item")
					return
				end
				Inventory[ch.Data[it.ItemType]]++
				Inventory[TagItem]--
				ch.Data[it.ItemType]=TagItem
				//Annoy("Recalc not yet done!")
				EquipRecalc($CharTag)
			case "Consumable"
			case "Key"
				Annoy("You cannot use a key item!\n\nThey will be used automatically when needed!")
			default
				Annoy("ERROR!\n\nUnknown item type ("..it.ItemType..")!\n\nMost likely a bug! Please report!")
		end

	end
	
	void CONSTRUCTOR()
	
		CSay("Constructing Field menu!")
	
		CSay("= void ToggleHelp")
		void ToggleHelp()
			__autohelp = not __autohelp
		end
		
		CSay("= Help table")
		table help
		help = { ['IconFile'] = "Help", ['Action'] = ToggleHelp, ['Help']="Toggles help text on/off", ['NoTab']=true}
		
		CSay("= Situation definitions!")
		// situations
		self.situations = { 
			["FIELD"] = { 
				["MenuItems"] = { 
					{ ["IconFile"]="Status", ["Right"]=self.Status, ["Help"]="Shows all statistics and data" },
					{ ["IconFile"]="Items", ["Right"]=self.Items, ["Help"]="Shows your inventory" },
					{ ["IconFile"]="Abilities", ["Right"]=self.Abilities, ["Help"]="Shows a character's abilities (if they actually got them)" },
					{ ["IconFile"]="Switch", ["Right"]=self.Switch, ["Help"]="Switch chacters" },
					{ ["IconFile"]="Trophies", ["Right"]=self.ViewAchievements, ["Help"]="Overview of achievements you can obtain, and how to obtain them" },
					{ ['IconFile'] = "Exit", ['Action'] = self.Quit, ['Help']="Quit the game", ['NoTab']=true}
				}, 
				["SwitchRange"] = {1,8},
				["SwitchAction"] = self.JustSwitch,
				["ItemAction"] = self.FieldItemAction,
				["Return"] = "FIELD" 
			},
			["COMBAT_ITEMS"] = {
				["MenuItems"] = {
					{ ["IconFile"]="Items", ["Right"]=self.Items, ["Help"]="Shows your inventory" }
				},
				["Return"] = "COMBAT",
				["ItemAction"] = void(string TagItem)
						assert(StateExists("FLOW_COMBAT"),"Combat session not started!")
						LuaDoString("FLOW_COMBAT",sprintf("Stage.Stages.SELECTTARGET.ComeToMe(trim('%s'),trim('%s'),{RemoveItem=trim('%s')})",self.CharTag,TagItem,TagItem),"Send Item to Combat FLow!")
						GoToFlow($situations[$situation].Return)
					end
			},
			["COMBAT_ABILITIES"] = {
				["MenuItems"] = {
					{ ["IconFile"]="Abilities", ["Right"]=self.Abilities, ["Help"]="Shows a character's abilities (if they actually got them)" }
				},
				["AblAction"] = void(string TagItem)
						assert(StateExists("FLOW_COMBAT"),"Combat session not started!")
						LuaDoString("FLOW_COMBAT",sprintf("Stage.Stages.SELECTTARGET.ComeToMe(trim('%s'),trim('%s'),{RemoveAP=%d})",self.CharTag,TagItem,Item[TagItem].AP_Cost or 0),"Send Ability to Combat FLow!")
						GoToFlow($situations[$situation].Return)
					end,
				["Return"] = "COMBAT"
			},
			["SHOP"] = {["MenuItems"] = {
					{ ["IconFile"]="Buy", ["Right"]=self.StoreBuy, ["Help"]="Buy items from this merchant" },
					{ ["IconFile"]="Sell", ["Right"]=self.Items, ["Help"]="Sells items to this merchant" }
				} ,
				["ItemAction"] = void(string itemtag)
						__cash = __cash + math.ceil(Item[itemtag].BuyPrice/__skill)
						Inventory[itemtag]--
					end,
				["ItemSellPrice"]=true,
				["Return"]="FIELD"
			},
			// ["BANK"] = {["MenuItems"] = {} } // unused
			["STONEMASTER"] = { 
				["MenuItems"] = {
					{
						["IconFile"] = "StoneMaster", 
						["Left"] = NIL.Use("Script/Use/Specific/StoneMaster").Panel, 
						["Right"] = self.Status, 
						["Help"]="Can this stone master help you get better?" 
					}
				},
				["Return"]="FIELD"
			}
		}
		
		CSay("= Configuring Situation Data!")
		for k,t in pairs(self.situations)
			CSayF("Situation %s has %d menu items (help not counted)",k,#t.MenuItems)
			t.MenuItems[#t.MenuItems+1] = tablecopy(help)
			CSayF("Situation %s has %d menu items (help included)",k,#t.MenuItems)
			int width
			width = (Screen.Width / #t.MenuItems)
			for i,item in pairs(t.MenuItems)
				item.x = ((i*width)-math.floor(width/2)-24)
			end
		end
		
		// ScreenBoxes
		CSay("= Creating work boxes")
		self.TopBox = new Box(0,0,Screen.Width,__TopBarHeight)
		self.LeftBox = new Box(0,__TopBarHeight,math.floor(Screen.Width/2),(Screen.Height-128)-__TopBarHeight)
		self.RightBox = new Box(math.floor(Screen.Width/2),__TopBarHeight,math.floor(Screen.Width/2),(Screen.Height-128)-__TopBarHeight)
		
		// Fonts
		CSay("= Import Big font")
		self.BigFont = GetFont("BIGTEXT")
		assert(self.BigFont,"Font import failed!")
		CSay("= Import Normal font")
		self.Font = GetFont("BOXTEXT")
		assert(self.Font,"Font import failed!")
		CSay("= Import Sys font")
		self.BlitzFont = GetFont("SYSFONT")
		assert(self.BlitzFont,"Font import failed!")
		CSay("= Construction of field menu done!")
		
		
		// Base Stats
		self.BaseStats = { "Strength", "Defense", "Intelligence", "Resistance", "Agility", "Accuracy", "Evasion" }
	end
	
	void ItemBar()
		$ItemHover = nil;
		assert($situations[$situation],sprintf("Situation %s unknown!",$situation) )
		__white
		for item in each($situations[$situation].MenuItems)
			$situations[$situation].citem = $situations[$situation].citem or item
			if $situations[$situation].citem == item and Now.Second % 2 == 0
				GraphColor.Alpha=100
			end
			item.Icon = item.Icon or LoadIfNew(sprintf("GFX/MenuIcons/%s.png",item.IconFile),sprintf("MENUITEM_%s",item.IconFile:upper() ) )
			assert(item.Icon,sprintf("Icon for %s not present!",item.IconFile) )
			item.Icon.Draw(item.x,4)
			if Mouse.X>item.x and Mouse.Y>4 and Mouse.X<item.x+48 and Mouse.Y<52
				$ItemHover=item
			ShowAutoHelp(item.Help or "No help text available")
			end
			GraphColor.Alpha=255
		end
	end

end





with Flow_FieldMenu

	global void BUB_Draw()
		bool bd_debug = false
		void dchat(string msg)
			if bd_debug
				CSay("DEBUG BUB_DRAW:> "..msg)
			end
		end
	
		// Draw all the boxes
		dchat("Boxes")
		Box.DrawAll()
		
		// Item bar
		dchat("Itembar")
		$ItemBar()
		
		// Party Sub
		dchat("Party")
		Party.ShowBar()
		
		// Left Tab
		dchat("Left panel")
		if type($situations[$situation].citem.Left)=="function"
			dchat("= Custom")
			$situations[$situation].citem.Left($LeftBox)
		else
			dchat("= base")
			$BasePanel($LeftBox)
		end
		
		// Right Tab
		dchat("Right panel")
		if type($situations[$situation].citem.Right)=="function"
			dchat("= Custom")
			$situations[$situation].citem.Right($RightBox)
		else
			dchat("= base")
			$NotYetImplemented($RightBox)
		end
		
		// Draw all achievement boxes
		Achievements.DrawAll()

		
		// Show Mouse
		dchat("Mouse")
		__white
		Mouse.Show()
		
		dchat("Done")
	end
	
	global void BUB_Update()
		Dev.ConCheck()
		
		if $ItemHover and Mouse.HitLeft
			if $ItemHover.Action
				$ItemHover.Action()
			end
			if not $ItemHover.NoTab
				$situations[$situation].citem = $ItemHover
			end
			//CSay(NIL.LuaSerialize("Clicked Menu Item",$ItemHover))
		end
		
		if $LM_Action and Mouse.HitLeft
			$LM_Action($LM_ActionArgs)
		end
		$LM_Action = nil;
		
		Party.Click()
	end
	
	global void PartyClick(int num)
		if num==$CharNum
			GoToFlow($situations[$situation].Return)
		elseif not prefixed($situation,"COMBAT_")
			$CharNum = num
		end
	end
	
end