// License:
// 	  src/Script/Script/Flow/ArtGallery.scyndi
// 
// 	  Version: 25.06.26 III
// 	
// 	  Copyright (C) 2020, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License

Script

#use "Libs/SCI/Sys"
#use "Libs/SCI/JCR6"
#use "Libs/SCI/Graphics"

#use "Script/Use/Need"
//#use "libs/tables"

//global var BUB_Draw
//global var BUB_Update


#use "Script/Data/General/ArtData"

group GROUP_ArtGallery

	readonly var Data
	readonly var Background
	readonly var Font
	readonly var Pijl_Op
	readonly var Pijl_Neer
	var hover 
	var picked
	var pickedpic	
	int Scroll = 0
	int pickedframe
	int pickedframeskip
	int maxscroll
	
	get int PijlX
		return Graphics.W-50
	end
	
	get int PijlY_Op
		return 5
	end
	
	get int PijlY_Neer
		return Graphics.H-120
	end

	
	void AutoExec()
		//BUB_Draw        = self.Draw
		//BUB_Update      = self.Update
		//self.Data       = NIL.Use("Script/Data/General/ArtData.nil")
		Data = Lua.Scyndi.Class.ArtData.Ret
		self.Background = TImage.Obtain("MENUBACK")
		//self.NotesFont  = LoadImageFont(FONT_Blitz)
		self.Font       = GetFont("BOXTEXT")
		self.Pijl_Op    = TImage.Obtain("UP")
		self.Pijl_Neer  = TImage.Obtain("DOWN")		
		//Music.Stop();
		int y = 0
		for F,ent in spairs(self.Data)
			y = y + 30
			ent.Y=y
			ent.File=F
			self.maxscroll = math.max(self.maxscroll,y)
		end
	end
	
	Bool Exists(String F)
		Return Ternary(Suffixed(Upper(F),".JPBF"),JCR6.DirExists(F),JCR6.FileExists(F))
	End
	
	void Draw()
		__white
		self.Background.Tile(0,0,Graphics.Width,Graphics.Height)
		self.hover = nil;
		if self.pickedpic
			self.pickedframeskip = (self.pickedframeskip + 1) % 8
			if self.pickedframeskip==0
				self.pickedframe++
			end
			if self.pickedframe>=self.pickedpic.Frames
				self.pickedframe=0
			end
			self.pickedpic.Draw(Graphics.Width-self.pickedpic.Width,(Graphics.Height/2)-(self.pickedpic.Height/2),self.pickedframe)
		end
		for fil,dat in pairs(self.Data)
			int y
			int inspring=0
			y = dat.Y-self.Scroll
			if y>10 and y<Graphics.Height-40
				inspring=0
				__white
				if !self.Exists(dat.File)
					SetColor(100,100,100)
				elif dat==self.picked
					__ember
				end
				if Mouse.Y>=y and Mouse.Y<=y+29 and Mouse.X<(self.PijlX) // *2 (?)
					self.hover=dat
					inspring=15
				end
				self.Font.Text(dat.Name .. "  (by "..dat.Author..")",10+inspring,y)
			end
		end
		__white
		if self.Scroll!=0
			__white
			self.Pijl_Op.Draw(self.PijlX,self.PijlY_Op)
			if Mouse.X>Graphics.W-40 and Mouse.Y>self.PijlY_Op and Mouse.Y<self.PijlY_Op+32 and Mouse.HeldLeft
				self.Scroll -= 4
			end
		end
		if self.Scroll<=self.maxscroll
			__white
			self.Pijl_Neer.Draw(self.PijlX,self.PijlY_Neer)
			if Mouse.X>Graphics.W-40 and Mouse.Y>self.PijlY_Neer and Mouse.Y<self.PijlY_Neer+32 and  Mouse.HeldLeft
				self.Scroll += 4
			end
		end
		Mouse.Show()
	end

	void Update()
		//Dev.ConCheck()
		if Mouse.HitRight
			//GoToFlow("FIELD")
			Sys.CurrentFlow="FIELD"
			return
		end
		if Mouse.HitLeft && self.hover && self.Exists(hover.File)
			self.picked = self.hover
			self.pickedpic = LoadImage(self.hover.File,"ART_GALLERY_SHOW")
		end
	end

end

Init
	GROUP_ArtGallery.AutoExec()
End

Global Void MainFlow()
	GROUP_ArtGallery.Update()
	GROUP_ArtGallery.Draw()
End
