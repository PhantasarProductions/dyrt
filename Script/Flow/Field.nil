// License Information:
// src/Tricky Script/Script/Flow/Field.nil
// Version: 19.08.03
// Copyright (C)  Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information





global bool FLOW_FIELD = true

#use "Script/Use/Anyway"
//#use "Script/Use/Link/Music"
#use "libs/saskia"
#use "libs/strings"
#use "libs/tables"

SASKIA.LoadFunction = string(string File2Load)
	return JCR_GetString(File2Load)
end

class Fader
	// kind 1 = Text
	// kind 2 = Image
	readonly int kind
	readonly var show
	int stage = 1
	int alpha = 0
	int timer = 1000
	int ID
	static int IDauto = 0
	readonly int x
	readonly int y
	static var Font
	static table Lijst
	
	void CONSTRUCTOR(obj)
		assert(obj,"Can't create a fader based on nothing at all!")
		if type(obj)=="string"
			Fader.Font = Fader.Font or LoadImageFont("Fonts/Scribish.30.jfbf")
			self.show = Font.Text(obj)
		elseif type(obj)=="table"
			string clname
			assert(obj[".classname"],"Table given doesn't appear to be a class I can use to create a fader with!")
			
			switch clname
				case "TImage" "TGraphText"
					switch clname
						case "TGraphText"
							self.kind=1
						case "TImage"
							self.kind=2
					end
					self.show=obj
					self.x = math.floor(Screen.Width /2)-math.floor(obj.Width /2)
					self.y = math.floor(Screen.Height/2)-math.floor(obj.Height/2)
				default
					error(sprintf("Class '%s' is not eligible for a basis to create a fader",clname))
			end
		end
		Fader.Lijst[ #Fader.Lijst + 1 ] = self
		Fader.IDauto++
		self.ID = Fader.IDauto
		CSayF("Shader #%d created",self.ID)
	end
	
	void DESTRUCTOR()
		CSayF("Shader #%d destroyed",self.ID)
	end
	
	static void Run()
		var Current
		Current = Fader.Lijst[1]
		if not Current
			return
		end
		clname=Current[".classname"]
		switch Current.stage
			case 1
				Current.alpha++
				if Current.alpha>=255
					Current.alpha=255
					Current.stage = 2
				end
			case 2
				Current.timer--
				if Current.timer<=0
					Current.stage = 3
				end
			case 3
				Current.alpha--
				if	Current.alpha<=0
					Current.alpha=0
					Current.stage=4
				end
			case 4
				for i=2,#Fader.Lijst+1 
					// +1 is to make sure the "nil" with which the list ends moves one spot down, effectively killing the last record!
					Fader.Lijst[i-1]=Fader.Lijst[i]
				end
			default
				error(sprintf("Unknown fader stage #%d",Current.stage))
		end
		GraphColor.Red   = Current.alpha
		GraphColor.Green = Current.alpha
		GraphColor.Blue  = Current.alpha
		GraphColor.Alpha = Current.alpha
		// This set up looks awkward, but I did it this way, to easily add more possibilities if they are required
		string clname
		clname = Current[".classname"]
		switch clname
			case "TImage" "TGraphText"
				Current.show.Draw(Current.x,Current.y)
			default
				error("?HUH HUH HUH?")
		end
		Current = nil;
	end
end

group FieldMap
	
	link Script = MapScript
	var Kthura
	var Saskia
	
end

group FlowField
	
	link Map = FieldMap
	
	void LoadMap(string MapFile,Layer)
		CSayF("Loading Map: %s",MapFile)
		CSay ("= Kthura")
		var kth
		kth = new Kthura(MapFile)
		if kth
			CSay("= Success!")
		else
			CSay("= Fail!")
		end
		FieldMap.Kthura = kth
		
		CSay("= NIL Script")
		do
			string MapScriptFile 
			MapScriptFile = "Script/MapScript/"..Trim(MapFile)..".nil"
			if not JCR_EntryExists(MapScriptFile)
				CWriteLine("MapScript file \""..MapScriptFile.."\" doesn't exist! Loading None.Nil in stead!",255,0,0)
				LoadState("MAP","Script/MapScript/None.nil")
			else
				CWriteLine("Loading MapScript file \""..MapScriptFile,0,255,0)
				LoadState("MAP",MapScriptFile)
			end
		end
		
		CSay("= SAKSIA Script")
		self.Map.Saskia = SASKIA.LoadScript(sprintf("SASKIA/MapScript/%s.saskia",Trim(MapFile)))
		self.Map.Saskia.Start("OnLoad")
		
		string pref
		string rest
		if Mid(kth.Data.Music,4,1)==":"
			pref = string.upper(Left(kth.Data.Music,3))
			rest = Right(kth.Data.Music,#kth.Data.Music-4)
			switch pref
				case "SAS"
					self.Map.Saskia.Start(rest)
				case "NIL"
					MapScript(rest)
				default
					error("Unknown alternate music direction: "..pref)
			end
		else
			Music.Play(kth.Data.Music)
		end
		if Layer
			kth.Layer = Layer
		end
	end

	void DrawScreen()
		FieldMap.Kthura.Draw()
	end


	void ChainMap(string MapFile,string SaskiaLabel,Layer)
		MapFile = trim(MapFile)
		SaskiaLabel = trim(SaskiaLabel)
		CSayF("Loading Map: %s; Starting SASKIA script from label: %s!",MapFile,SaskiaLabel)
		self.LoadMap(MapFile)
		self.Map.Saskia.Start(SaskiaLabel,Layer)
	end
	
	void GoToLayer(string Layer)
		FieldMap.Kthura.Layer = Layer
	end
	
end

global void BoxText_Back()
	FlowField.DrawScreen()
end


global void BUB_Draw()
	// This function will draw the screen minus the character bar
	// That way it can be easily called from BoxText and maybe a few other functions
	FlowField.DrawScreen()
	
	// Character screen
	Party.ShowBar()
end


global void BUB_Update()
	// debug
	Dev.ConCheck()
	
	// SASKIA Cycle
	SASKIA.Cycle()

end


group ConsoleCommands
	
	void COUNTOBJECTS()
		for k,cnt in spairs(FlowField.Map.Kthura.CountObjects())
			CSayF("%20s:%9d",k,cnt)
		end
	end
	
	void MAPDATA()
		for k,v in spairs(FlowField.Map.Kthura.Data())
			CSayF("%25s = %s",k,v)
		end
	end
	
end




