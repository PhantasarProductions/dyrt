// License Information:
// src/Tricky Script/Script/Flow/Field.nil
// Version: 19.11.15
// Copyright (C)  Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#macro FieldFlow FlowField

global bool FLOW_FIELD = true

#use "Script/Use/Anyway"
#use "Script/Use/Specific/Field" as XFIELDX
#use "libs/saskia"
#use "libs/strings"
#use "libs/tables"
#use "libs/Roman"
#use "libs/LinkedList"

// Requires linked list, so I need this to be last!
#use "Script/Use/MiniMessages"

#macro __player FlowField.Map.Kthura.Actor.Player

SASKIA.LoadFunction = string(string File2Load)
	return JCR_GetString(File2Load)
end

var XPand(t, i)
	i = i or 1
	if t[i] ~= nil then
		return t[i], XPand(t, i + 1)
	end
end

class Clickables
	static var List
	static var Map
	
	readonly string Tag
	readonly string Layer
	readonly string ArriveState
	readonly string ArriveFunction
	readonly delegate ArriveDelegate
	readonly table ArriveParam
	readonly string ArriveSASKIA
	readonly int WalkToX
	readonly int WalkToY
	
	void CONSTRUCTOR(string Tag,int x, int y,Arrive,infinity)
		CSayF("= Converting object with tag %s into a clickable",Tag)
		table sAr
		string aSt
		string aFn
		self.List = self.List or new TLinkedList()
		self.List.AddLast(self)
		self.WalkToX = x
		self.WalkToY = y
		self.Tag = Tag
		self.ArriveParam = { infinity }
		if Arrive==nil or Arrive==""
			return
		end
		if type(Arrive)=='function'
			self.ArriveDelegate = Arrive
			return
		end
		assert( type(Arrive)=="string","Arrive must be string or delegate, but I got "..type(Arrive) )
		sAr = split(Arrive,":")
		if #sAr==1			
			self.ArriveFunction=Arrive
			return
		end
		switch sAr[1]:upper()
			case "SASKIA"
				self.ArriveSASKIA = sAr[2]
			default
				self.ArriveState = sAr[1]
				self.ArriveFunction = sAr[2]
		end
	end
	
	static void Massacre()
		Clickables.List = Clickables.List or LinkedList()
		Clickables.List.Clear()
	end
	
	static var Clicked(int x, int y)
		var M
		M = $Map
		with M
			for cl in Clickables.List.Each
				// Crash prevention for once an object was removed!
				if $HasTag(cl.Tag)
					$Obj = cl.Tag
					//-- if cl.Layer==$Layer and 
					switch $ObjString.Kind
						case "Zone" "TiledArea"
							if x>$ObjInt.x and x<$ObjInt.x+$ObjInt.w and y>$ObjInt.y and y<$ObjInt.y+$ObjInt.h
								return cl
							end
						case "Obstacle"
							int hw
							hw = math.floor($ObjInt.ObjectWidth/2)
							if x>$ObjInt.x-hw and x<$ObjInt.x+hw and y>$ObjInt.y-$ObjInt.ObjectHeight and y<$ObjInt.y
								return cl
							end
						default
							error("Unknown object kind ("..$ObjString.Kind..") as clickable!")				
					end
				end
			end
		end
		return nil;
	end
end

class Fader
	// kind 1 = Text
	// kind 2 = Image
	readonly int kind
	readonly var show
	int stage = 1
	int alpha = 0
	int timer = 1000
	int ID
	static int IDauto = 0
	readonly int x
	readonly int y
	static var Font
	static table Lijst
	
	void CONSTRUCTOR(obj)
		assert(obj,"Can't create a fader based on nothing at all!")
		if type(obj)=="string"
			Fader.Font = Fader.Font or LoadImageFont("Fonts/Scribish.30.jfbf")
			self.show = Fader.Font.Text(obj)
			self.x = math.floor(Screen.Width /2)-math.floor(self.show.Width /2)
			self.y = math.floor(Screen.Height/2)-math.floor(self.show.Height/2)
		elseif type(obj)=="table"
			string clname
			assert(obj[".classname"],"Table given doesn't appear to be a class I can use to create a fader with!")
			clname=obj[".classname"]
			switch clname
				case "TImage" "TGraphText"
					switch clname
						case "TGraphText"
							self.kind=1
						case "TImage"
							self.kind=2
					end
					self.show=obj
					self.x = math.floor(Screen.Width /2)-math.floor(obj.Width /2)
					self.y = math.floor(Screen.Height/2)-math.floor(obj.Height/2)
				default
					error(sprintf("Class '%s' is not eligible for a basis to create a fader",clname))
			end
		end
		Fader.Lijst[ #Fader.Lijst + 1 ] = self
		Fader.IDauto++
		self.ID = Fader.IDauto
		CSayF("Fader #%d created",self.ID)
	end
	
	void DESTRUCTOR()
		CSayF("Fader #%d destroyed",self.ID)
	end
	
	static void Run()
		var Current
		Current = Fader.Lijst[1]
		if not Current
			return
		end
		string clname
		clname=Current.show[".classname"]
		switch Current.stage
			case 1
				Current.alpha++
				if Current.alpha>=255
					Current.alpha=255
					Current.stage = 2
					CSayF("Fader #%d gone to stage 2",Current.ID)
				end
			case 2
				Current.timer--
				//Fader.Font.DrawText(sprintf("Fader #%d; Timer: %3d",Current.ID,Current.timer),5,75)
				if Current.timer<=0
					Current.stage = 3
					CSayF("Fader #%d gone to stage 3",Current.ID)
				end
			case 3
				Current.alpha--
				if	Current.alpha<=0
					Current.alpha=0
					Current.stage=4
					CSayF("Fader #%d gone to stage 4, where it will be prepared for destruction!",Current.ID)
				end
			case 4
				for i=2,#Fader.Lijst+1 
					// +1 is to make sure the "nil" with which the list ends moves one spot down, effectively killing the last record!
					Fader.Lijst[i-1]=Fader.Lijst[i]
				end
				CSayF("Fader #%d has been removed from the list, and will eventually be caught by the garbage collector!",Current.ID)
			default
				error(sprintf("Unknown fader stage #%d",Current.stage))
		end
		GraphColor.Red   = Current.alpha
		GraphColor.Green = Current.alpha
		GraphColor.Blue  = Current.alpha
		GraphColor.Alpha = Current.alpha
		// This set up looks awkward, but I did it this way, to easily add more possibilities if they are required
		switch clname
			case "TImage" "TGraphText"
				Current.show.Draw(Current.x,Current.y)
				GraphColor.Alpha = 255
			default
				error("?HUH HUH HUH?\nImpossible to have class "..clname.."\n\nHow the fuck did this get past the first check!\n\nMust be a bug! Please report!")
		end
		Current = nil;
	end
end

group FieldMap

	string LoadedMap
	// var CurrentLayer
	
	link Script = MapScript
	var Kthura
	var Saskia
	
	get int ScrollX
		return self.Kthura.ScrollX
	end
	set int ScrollX
		self.Kthura.ScrollX=value
	end
	get int ScrollY
		return self.Kthura.ScrollY
	end
	set int ScrollY
		self.Kthura.ScrollY=value
	end
	
	var ToMapCoords(int x, int y)
		return x+$ScrollX,y+$ScrollY
	end
	
	var FromMapCoords(int x,int y)
		return x-$ScrollX,y-$ScrollY
	end
	
	get int TravelLevel
		return tonumber(self.Kthura.Data.Travel_Level) or 1
	end
	
	void Kill(string tag,permanent)
		string m
		m = "MAPCHANGES."..FieldMap.LoadedMap
		if permanent
			Swap.Data[m] = Swap.Data[m] .. "FieldMap.Kthura.Layer=\""..FieldMap.Kthura.Layer.."\";\tFieldMap.Kill(\""..tag.."\")\n"
			CSay("Permanent kill, object tagged: "..tag)
		else	
			CSay("Temporary kill, object tagged: "..tag)
		end
		$Kthura.Kill(tag)
	end
	
	void PermaKill(string tag)
		$Kill(tag,true)
	end
	
	void Hide(string tag)
		$Kthura.HideObject(tag)
	end
	
	void Show(string tag)
		$Kthura.ShowObject(tag)
	end
	
end

string fieldleader

group SGLink

	void LoadSGFlow()
		if not StateExists("FLOW_SG")
			CSay("Loading flow: FLOW_SG")
			LoadFlow("SG","Script/Flow/SaveGameManager.nil")
		end
	end
	
	void OpenSG()
		self.LoadSGFlow()
		LuaDoString("FLOW_SG","SG.mode = 'SAVE'","SGMode => SAVE")
		GoToFlow("SG")
	end

end


group FlowField

	bool AutoScroll = true
	
	link Map = FieldMap
	
	var WalkArrival	
	table WalkArrivalParams
	var SFont
	
	void UpdatePlayerTex()
		if self.Map.Kthura.Actor.Player.Exists
			self.Map.Kthura.Actor.Player.Texture = "gfx/actors/heroes/"..trim(self.Leader).."."..trim(self.Map.Kthura.Actor.Player.Wind)..".jpbf"
		end
	end
	
	get string Leader
		bool found
		for i=1,8
			found = found or (RPG.Party[i]==fieldleader)
		end
		if (not fieldleader) or fieldleader == "" or (not found)
			fieldleader = RPG.Party[1]
		end
		//self.UpdatePlayerTex()
		
		return fieldleader
	end
	
	set string Leader
		int i
		repeat
			i++
			if i>8
				error("Leader cannot be a non-existent character!")
			end
		until RPG.Party[i]==value
		fieldleader = value
		self.UpdatePlayerTex()
	end
	
	void SaveSpot(string col)
		for i=1,8
			if RPG.Party[i] and RPG.Party[i]!=""
				string ch
				ch=RPG.Party[i]
				switch col:upper()			
					case "RED"
						if __skill!=3
							RPG.Char(ch).Points("VIT").Have = RPG.Char(ch).Points("VIT").Maximum
						end
						if __skill==1
							RPG.Char(ch).Points("HP").Have = RPG.Char(ch).Points("HP").Maximum
						end
					case "GREEN"
						if __skill!=3
							RPG.Char(ch).Points("VIT").Have = RPG.Char(ch).Points("VIT").Maximum
							RPG.Char(ch).Points("HP").Have = RPG.Char(ch).Points("HP").Maximum
						end
					case "BLUE"
						RPG.Char(ch).Points("VIT").Have = RPG.Char(ch).Points("VIT").Maximum
						RPG.Char(ch).Points("HP").Have = RPG.Char(ch).Points("HP").Maximum
						gv.String.RespawnRoom = $Map.LoadedMap
						gv.String.Layer = $Map.Layer
						gv.Int.RespawnX = self.Map.Kthura.Actor.Player.X
						gv.Int.RespawnY = self.Map.Kthura.Actor.Player.Y
					default
						error("Unknown savegame color code: "..col)
				end
			end
		end
		SGLink.OpenSG()
	end
	
	void TravelEmblem(string tag)
		var kth
		int mx
		int my
		kth = FieldMap.Kthura
		kth.Obj=tag
		//mx,my = FieldMap.FromMapCoords(kth.ObjInt.X,kth.ObjInt.Y)
		mx = kth.ObjInt.X - FieldMap.ScrollX
		my = kth.ObjInt.Y - FieldMap.ScrollY
		__travellevel++
		__levelcap = __levelcap + (6-__skill)
		new MiniMsg(mx,my-20,"Traveler's Emblem Found",200,255,100)
		new MiniMsg(mx,my   ,sprintf("Traveler's level increased to: %s",Roman(__travellevel)),240,210,80)
		new MiniMsg(mx,my+29,sprintf("Level cap increased to: %s",Roman(__levelcap)),100,200,255)
		FieldMap.PermaKill(tag)
	end
	
	void Treasure(string Tag,string ItemTag,PermaKill)
		static var chaching
		static var getitem
		int mx
		int my
		var kth
		kth = FieldMap.Kthura
		mx = kth.ObjInt.X - FieldMap.ScrollX
		my = kth.ObjInt.Y - FieldMap.ScrollY
		ItemTag = ItemTag:upper()
		if prefixed(ItemTag,"CASH:")
			int foundcash 
			foundcash = tonumber(split(ItemTag,":")[2]) or 1
			string shild = "shilders"
			if foundcash == 1 
				shild = 'shilder'
			end
			if __cash > (300000000 / __skill)
				new MiniMsg(mx,my,sprintf("OVERLOADED: %d %s",foundcash, shild),255,0,0)
				return
			end
			chaching = chaching or LoadAudio("SFX/Treasure/ChaChing.wav")
			chaching.Play()
			__cash = __cash + foundcash
			new MiniMsg(mx,my,sprintf("Obtained: %d %s",foundcash, shild),0,180,255)
			$Map.Kill(Tag,PermaKill!=false)
		else
			string iname
			iname = Item[ItemTag].Name
			if Inventory[ItemTag]<__itemcap
				Inventory[ItemTag]++
				new MiniMsg(mx,my,sprintf("Obtained: %s", iname),180,0,255)
				getitem = getitem or GetAudio("GETITEM")
				getitem.Play()
				$Map.Kill(Tag,PermaKill!=false)
			else
				new MiniMsg(mx,my,sprintf("OVERLOADED: %s",iname, iname),255,0,0)
			end
		end
		// error("Treasures not yet supported! Come back later!")
	end
	
	void LoadMap(string MapFile,Layer)
		$Map.LoadedMap=MapFile
		CSayF("Loading Map: %s",MapFile)
		CSay ("= Clearing clickables")
		Clickables.Massacre();
		CSay ("= Kthura")
		var kth
		kth = new Kthura(MapFile)
		if kth
			CSay("= Success!")
		else
			CSay("= Fail!")
		end
		FieldMap.Kthura = kth
		CSay("= RENC Data!")
		RENC.Reset(tonumber(kth.Data.Travel_Level) or 0)
		do
			CSay("= Map changes")
			string m
			delegate f
			m = "MAPCHANGES."..FieldMap.LoadedMap
			f = assert(NIL.Load(Swap.Data[m]))
			f()
		end
		CSay("= Zone Action")
		ZoneAction.Reset()
		CSay("= Map Text")
		do
			string scenfile
			scenfile = "Scenario/"..__lang.."/Maps/"..MapFile
			if JCR_EntryExists(scenfile)
				CWriteLine("= Scenario 'MAP' >> "..scenfile,180,255,0)
				BoxText.Load("Maps/"..MapFile,"MAP")
			else
				CWriteLine("= WARNING! Scenario \""..scenfile.."\" not found!",255,0,0)
			end
		end
		CSay("= NIL Script")
		do
			string MapScriptFile 
			MapScriptFile = "Script/MapScript/"..Trim(MapFile)..".nil"
			if not JCR_EntryExists(MapScriptFile)
				CWriteLine("MapScript file \""..MapScriptFile.."\" doesn't exist! Loading None.Nil in stead!",255,0,0)
				LoadState("MAP","Script/MapScript/None.nil")
			else
				CWriteLine("Loading MapScript file \""..MapScriptFile,0,255,0)
				LoadState("MAP",MapScriptFile)
			end
		end
		
		CSay("= SAKSIA Script")
		self.Map.Saskia = SASKIA.LoadScript(sprintf("SASKIA/MapScript/%s.saskia",Trim(MapFile)))
		self.Map.Saskia.Start("OnLoad")
		
		table RandomTreasure
		CSay("= Compiling random treasures")
		for sklist=__skill,3
			string trline
			table tritems
			table tritembreak
			trline = kth.Data[sprintf("Treasure_skill%d",sklist)]
			tritems = split(trline,";")
			for item in each(tritems)
				string name
				int num
				tritembreak = split(item,",")
				name = tritembreak[1]
				num = tonumber(tritembreak[2]) or 1
				for i=1,num
					RandomTreasure[#RandomTreasure+1]=name
				end
			end
		end
		
		CSay("= Compiling auto-clickables")
		Clickables.Map = kth
		for Lay in kth.EachLayer
			CSayF("= Clickables on Layer %s",Lay)
			for Tag in kth.EachTag(Lay)
				table s
				s = split(Tag,"_")
				switch s[1]
					// "SAVEPOT" was the result of a bug in the Kthura editor script
					// Fixed now, but a few maps can still suffer from that!
					case "SAVEPOT" "SAVESPOT"
						kth.Obj=Tag					
						new Clickables(Tag,kth.ObjInt.x, kth.ObjInt.y+32, FlowField.SaveSpot ,s[2])
					case "TRAVEL"
						kth.Obj=Tag					
						new Clickables(Tag,kth.ObjInt.x, kth.ObjInt.y, FlowField.TravelEmblem ,Tag)
					case "RANDOMTREASURE"
						kth.Obj=Tag
						if kth.ObjString.Kind=="$RandomTreasure" 
							if math.random(1,__skill^__skill)==1
								kth.ObjString.Kind="Obstacle"
								kth.ObjString.Texture='gfx/PickUps/Bag.png'
								new Clickables(Tag,kth.ObjInt.x,kth.ObjInt.y,FlowField.Treasure,Tag,RandomTreasure[math.random(1,#RandomTreasure)],__skill==3 or (__skill==1 and math.random(1,2)==1))
							else
								// Preventing any future conflicts, but the spot is still usable for later!
								kth.Kill(Tag)
							end
						else
							CSayF("= Invalid Random Treasure \"%s\"! Ignored!",Tag)
						end
					
				end
			end
		end
		
		
		string pref
		string rest
		if Mid(kth.Data.Music,4,1)==":"
			pref = string.upper(Left(kth.Data.Music,3))
			rest = Right(kth.Data.Music,#kth.Data.Music-4)
			switch pref
				case "SAS"
					self.Map.Saskia.Start(rest)
				case "NIL"
					MapScript(rest)
				default
					error("Unknown alternate music direction: "..pref)
			end
		else
			CSayF("= Music: %s",kth.Data.Music)
			Music.Play(kth.Data.Music)
		end
		if Layer
			kth.Layer = Layer
		end
	end

	void DrawScreen()
		// Take care of actor (if one is there)
		if __player.Exists
			self.UpdatePlayerTex()
		end
	
		// Draw Map
		FieldMap.Kthura.Draw()
		
		// Fader
		Fader.Run()
	end

	void ChainMap(string MapFile,string SaskiaLabel,Layer)
		MapFile = trim(MapFile)
		SaskiaLabel = trim(SaskiaLabel)
		CSayF("Loading Map: %s; Starting SASKIA script from label: %s!",MapFile,SaskiaLabel)
		self.LoadMap(MapFile,Layer)
		self.Map.Saskia.Start(SaskiaLabel,Layer)
	end
	
	void GoToLayer(string Layer)
		FieldMap.Kthura.Layer = Layer
	end
	
	void SpawnPlayer(string spot,altwind)
		self.Map.Kthura.Actor.Player.Spawn(spot)
		if altwind
			self.Map.Kthura.Actor.Player.Wind=altwind
		end
		self.UpdatePlayerTex()
	end
	
	void DoAutoScroll(force)
		if not force
			if (not self.Map.Kthura.Actor.Player.Exists) or (not self.AutoScroll)
				return
			end
		end
		self.Map.ScrollX = self.Map.Kthura.Actor.Player.X - (Screen.Width /2)
		self.Map.ScrollY = self.Map.Kthura.Actor.Player.Y - (Screen.Height/2)
	end
	
	void FieldStats()
		int Y
		int YMin = 20
		Y = (Screen.Height-128)-YMin
		$SFont = $SFont or LoadImageFont("Fonts/Blitz.jfbf")
		$SFont.DrawText("Phantasar Play-Time: "..Time.PhantasarTime,5,Y) Y = Y - YMin
		$SFont.DrawText("    Earth Play-Time: "..Time.PlayTime,5,Y) Y = Y - YMin
		switch __cash
			case 0
				$SFont.DrawText("You don't have any money, right now!",5,Y)
			case 1
				$SFont.DrawText(sprintf("Cash: %9d shilder",1) ,5,Y)
			default
				$SFont.DrawText(sprintf("Cash: %9d shilders",__cash) ,5,Y)
		end
		Y = Y - YMin
		$SFont.DrawText("Level Cap: "..Roman(__levelcap),5,Y)
		Y = Y - YMin
		$SFont.DrawText("Traveler's level: "..Roman(__travellevel),5,Y)
	end
	
	get string SGData
		string ret
		// Map + Layer
		CSay("SGData.Map")
		ret = ret .. sprintf("FlowField.LoadMap('%s','%s')\n",trim(FlowField.Map.LoadedMap),trim(FlowField.Map.Kthura.Layer))
		// Scroll values
		CSay("SGData.Scroll")
		ret = ret .. sprintf("FlowField.Map.ScrollX = %10d\n",$Map.ScrollX)
		ret = ret .. sprintf("FlowField.Map.ScrollY = %10d\n",$Map.ScrollY)
		// Player Location	
		CSay("SGData.Player")
		ret = ret .. sprintf("FlowField.Map.Kthura.Actor.Player.CoordSpawn(%6d,%6d,'%s')\n",self.Map.Kthura.Actor.Player.X,self.Map.Kthura.Actor.Player.Y,trim(self.Map.Kthura.Actor.Player.Wind))
		CSay("SGData.Leader")
		ret = ret .. sprintf("FlowField.Leader = '%s'\n",trim($Leader))
		CSay("SGData.Done")
		return ret
	end
	
end

global void BoxText_Back()
	FlowField.DrawScreen()
end


global void BUB_Draw()
	// AutoScroll
	FlowField.DoAutoScroll()
	
	// This function will draw the screen minus the character bar
	// That way it can be easily called from BoxText and maybe a few other functions
	FlowField.DrawScreen()
	
	// Character screen
	FlowField.FieldStats()
	Party.SelectedCharacter=0
	Party.ShowBar()
	
	// Random Encounter Gauge
	RENC.Gauge()
	
	// Mini Messages (must be last before the mouse, which must be the very last)
	MiniMsg.DrawAll()
	
	// Show Mouse
	__white
	Mouse.Show()
end


global void BUB_Update()
	static int eox
	static int eoy
	bool Acted = false
	
	// debug
	Dev.ConCheck()
	
	// Time
	Time.Update()
	
	// SASKIA Cycle
	if SASKIA.Cycle()
		// Will break off this function call if actual SASKIA sessions
		// are still open. This to prevent conflicts with the walk engine
		// and such
		return
	end
	
	// Zone Checking
	Acted = ZoneAction.CheckAll()
	
	if Mouse.Y<Screen.Height-128 and Mouse.HitLeft
		var clobj
		clobj = Clickables.Clicked(FlowField.Map.Kthura.ScrollX + Mouse.X,FlowField.Map.Kthura.ScrollY + Mouse.Y)
		if clobj
			// Todo: Here I'll handle stuff like clickable objects
			// As none exist at this moment of the game's creation
			// I've set this to "if false" to make sure this content
			// is always skipped for now, but that the 'just walk' part
			// can already be scripted
			CSayF("Clicked '%s', so going into alternate action!",clobj.Tag)
			CSayF("As a result player should walk to (%d,%d)",clobj.WalkToX,clobj.WalkToY)
			FlowField.Map.Kthura.Actor.Player.WalkTo(clobj.WalkToX,clobj.WalkToY)
			if clobj.ArriveDelegate
				CSay("And we need to attach a delegate!")
				FlowField.WalkArrival = clobj.ArriveDelegate
				FlowField.WalkArrivalParams = clobj.ArriveParam
			elseif clobj.ArriveFunction!=""
				CSayF("Function string \"%f\" attached!",clobj.ArriveFunction)
				FlowField.WalkArrival = clobj.ArriveFunction
			else
				CSay("No function links in this clickabke!")
			end
		else 
			// When all options are gone, let's just walk
			int wtx
			int wty
			wtx = FlowField.Map.Kthura.ScrollX + Mouse.X
			wty = FlowField.Map.Kthura.ScrollY + Mouse.Y
			CSayF("Player has requested to walk to (%d,%d)",wtx,wty)
			FlowField.Map.Kthura.Actor.Player.WalkTo(wtx,wty)
			FlowField.WalkArrival = nil;
		end
	end
		
	if (not FlowField.Map.Kthura.Actor.Player.Walking) 
		//and (FlowField.WalkArrival) and (FlowField.WalkArrival!="")
		switch type(FlowField.WalkArrival)
			case "nil"
				//CSay("No walk arrival set, so let it be!")
			case "string"
				error("WalkArrival string feature not yet implemented!")
			case "function"
				CSay("Walk arrival is a delegate, so let's call it!")
				FlowField.WalkArrival(XPand(FlowField.WalkArrivalParams))
				Acted = true
			default
				error("Invalid WalkArrival type: "..type(FlowField.WalkArrival))			
		end
		FlowField.WalkArrival = nil;
	elseif not Acted
		int enx
		int eny
		enx = math.floor(FlowField.Map.Kthura.Actor.Player.X/32)
		eny = math.floor(FlowField.Map.Kthura.Actor.Player.Y/32)
		if enx!=eox or eny!=eoy
			RENC.RencCheck()
		end
		eox=enx
		eoy=eny
	end
	
	Party.Click()

end


global void PartyClick(int num)
	GoMenu(num,"Field")
end


group ConsoleCommands
	
	void COUNTOBJECTS()
		for k,cnt in spairs(FlowField.Map.Kthura.CountObjects())
			CSayF("%20s:%9d",k,cnt)
		end
	end
	
	void DESTROYMAPSWAP()
		string m
		m = "MAPCHANGES."..FieldMap.LoadedMap
		Swap.Data[m] = "print(\"Everything in this swap file has been destroyed by order of the big killer! So long suckers!\")\n\n"
		CSayF("Swap file '%s' has been emptied!",m)
	end
	
	void MAPDATA()
		for k,v in spairs(FlowField.Map.Kthura.Data())
			CSayF("%25s = %s",k,v)
		end
	end
	
	void MYPOS()
		int r
		int g
		int b
		string wing = ""
		r = math.random(0,255)
		g = math.random(0,255)
		b = math.floor(255-((r+g)/2))
		if FlowField.Map.Kthura.Actor.Player.Walking
			wing = "Walking!"
		end
		switch type(FlowField.WalkArrival)
			case "string"
				wing = sprintf("%s Arrival function call attached: %s", wing,FlowField.WalkArrive)
			case "function"
				wing = sprintf("%s Arrival delegate call attached!",wing)
			case "nil"
				wing =sprintf("%s No arrival data!",wing)
		end
		CWriteLine(sprintf("Pure player position is: (%5d,%5d) %s",FlowField.Map.Kthura.Actor.Player.X,FlowField.Map.Kthura.Actor.Player.Y,wing),r,g,b)
		CWriteLine(sprintf("Grid player position is: (%5d,%5d) %s",math.floor(FlowField.Map.Kthura.Actor.Player.X/32),math.floor(FlowField.Map.Kthura.Actor.Player.Y/32),wing),r,g,b)
		CWriteLine(sprintf("Enounter Rate: %d/%d",RENC.Rate,RENC.MaxRate),r,g,b)
	end
	
	void SAVE(A)
		if type(A)!="string"
			CWriteLine("NO WAY, JOSE! Save needs a string parameter!",255,0,0)
			return
		end
		switch A:upper()
			case "SPOT"
				SGLink.OpenSG();
			case "DIR" "LS"
				CWriteLine("Debug save directory overview not yet available!",255,0,0)
			default
				CWriteLine("Debug save not yet available!",255,0,0)
		end
	end
	
	void MINIMESSAGES()
		int c
		CSayF("Number of active minimessages: %d",#MiniMsg.List)
		for msg,lnk in MiniMsg.List.Each
			c++
			CSayF("%5d: (%d,%d) CD:%d/%d >> %s",c,msg.X,msg.Y,msg.CD1,msg.CD2,msg.msg)
		end
	end
end

































