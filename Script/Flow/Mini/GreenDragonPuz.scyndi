// License:
// 	  src/Script/Script/Flow/Mini/GreenDragonPuz.scyndi
// 
// 	  Version: 25.05.14 XII
// 	
// 	  Copyright (C) 2020, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License

Script

#use "Libs/SCI/Sys"
#use "Libs/SCI/Graphics"

#use "Script/Use/Need"
#use "Script/Use/Misc/StartCombatMod"
//#use "libs/tables"
	
#macro ForceView false
#macro spacing 176
#macro yline 100
#macro starttijd 320
	
int speed
int maxmoves
int Stage = 1


//var flask
//var skull
//var back

plua flask = LoadNewImage("GFX/Puzzle/BalletjeBalletje/Flask.png","BalletjeBalletjeFles")
plua skull = LoadNewImage("GFX/Puzzle/BalletjeBalletje/Skull.png","BalletjeBalletjeSchedel")
plua back  = ObtainImage("MENUBACK")

quickmeta giftig
	index
		return gv.Int["GreenDragonFlask"..key]
	end
	
	newindex
		gv.Int["GreenDragonFlask"..key] = value
	end
	
	//len
	//	return 5
	//end
end

class Fles
	bool giftig = false
	bool marked = false
	int x
	int movex = 0
	
	//get int X
	//	return self.x
	//end
	
	void Draw()
		flask.Draw(self.x,yline)
	end
	
	CONSTRUCTOR(int sx)
		self.x = sx
		CSayF("Flesje op x: %d",sx)
	end
end

table Flessen
Init
	for i=1,5
		Flessen[i] = new Fles(i*spacing)
	end
	for i=1,4
		// CSay("???"..i.."\t"..tostring(giftig[i]))
		CSayF("%d> Flesje %d is giftig! Niet drinken dus!",i,giftig[i])
		Flessen[giftig[i]].giftig = true
		Flessen[giftig[i]].marked = gv.Bool["GREENDRAGONFLASKMARKED"..giftig[i]]
	end

End

Get Int MaxMoves

	CSayF("Maxmoves wanted for skill #%d",__skill)
	
	switch __skill
	
	case 1
		speed = 1
		return 5
	case 2
		speed = 4
		return 7
	case 3
		speed = 8
		return 10
	default
		Lua.error("Unknown skill "..__skill)
		return 0
	end

End

	
group Start

	int Time = starttijd
	
	void Draw()
		for i=1,5
			if Flessen[i].giftig && (ForceView || Flessen[i].marked )
				skull.Draw(Flessen[i].X+36,yline + 100)
			end
		end
		Rect(0,Graphics.H-50,math.floor( (self.Time / starttijd ) * Graphics.W ),50)
	end 
	
	void Update()
		self.Time--
		if self.Time<=0
			Lua.Scyndi.Globals.Moving.Moves = MaxMoves
			CSayF("Going to move at speed %d for %d moves",speed,MaxMoves)
			Stage++
		end
	end
	
end
	
group Moving
	
	int moves
		
	
	//void CONSTRUCTOR()
	//	self.moves = maxmoves
	//end
	
	void Draw()
	end 
	
	void Update()
		bool moved
		for i,fles in pairs(Flessen)
			int mbx
			mbx = i * spacing
			if fles.x<mbx 
				fles.x += speed
				if fles.x>mbx
					fles.x=mbx
				end
				moved=true
			elseif fles.x>mbx 
				fles.x -= speed
				if fles.x<mbx
					fles.x=mbx
				end
				moved = true
			end
		end
		if ! moved
			CSayF("Moves left:%d",moves)
			if self.moves<=0
				Stage++
				return
			end
			int s1
			int s2
			var sf
			repeat
				s1 = math.random(1,5)
				s2 = math.random(1,5)
			until s1!=s2
			sf = Flessen[s1]
			Flessen[s1]=Flessen[s2]
			Flessen[s2]=sf
			CSayF("Swapping flask #%d and #%d",s1,s2)
			self.moves--
		end
	end
	
end
	
Init
	Moving.Moves = MaxMoves
	CSayF("Max Moves: %d",Moving.Moves)
End

group Ask
	
	var MYC = ObtainFont("BIGTEXT").iText("Choose the correct flask!")
	int hover = 0
	
	//void CONSTRUCTOR()
	//	self.MYC = GetFont("BIGTEXT").Text("Choose the correct flask!")
	//end
	
	void Draw()
		self.MYC.Draw(math.floor(Screen.W/2),25,2)
		self.hover = 0
		for i,f in pairs(Flessen)
			int xline
			xline = i * spacing
			if Mouse.X>xline and Mouse.Y>yline and Mouse.X<xline+flask.Width and Mouse.Y<yline+flask.Height
				self.hover = i
				Rect(xline,yline,flask.Width,flask.Height,1)
			end
		end
		Mouse.Show()		
	end 
	
	void Update()
		if Mouse.HitLeft && self.hover>0
			Stage++
		end
	end
	
end

group Reveal
	
	int tijd = starttijd
	
	void Draw()
		for i=1,5
			if Flessen[i].giftig 
			// and (ForceView or gv.Bool["GREENDRAGONFLASKMARKED"..i] )
				skull.Draw(Flessen[i].X+36,yline + 100)
			end
		end
	end
	
	void Update()
		self.tijd--
		if self.tijd>0
			return
		end
		if Flessen[Ask.hover].giftig
			Map.GoToLayer("#000","Start")
			Map.WipeSASKIA()
			GoToFlow("FIELD")
		else
			StartCombat.StartSession()
			StartCombat.Music = "Music/Combat/Boss/Special.wav"
			StartCombat.Arena = "GreenDragonCave"
			StartCombat.Foe[1] = "Boss/GreenGuardian"
			StartCombat.NoLose = false
			StartCombat.FoeIDDQD = false
			StartCombat.Ready()
		end
	end
	
end
	
table Stages = { Start,Moving,Ask,Reveal }

global void MainFlow()
//global void BUB_Draw()
	back.Tile(0,0,Screen.W,Screen.H)
	//for f in each(Flessen)
	for _,f in pairs(Flessen)
		f.Draw()
	end
	Stages[Stage].Draw()
//end

//global void BUB_Update()
	//Dev.ConCheck()
	Stages[Stage].Update()
end
