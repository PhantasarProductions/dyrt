// License:
// 	  src/Script/Script/Flow/Bank.scyndi
// 
// 	  Version: 25.05.01 V
// 	
// 	  Copyright (C) 2020, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License

Script

#USE "Libs/SCI/Sys"
#use "Libs/SCI/Events"
#use "libs/SCI/sstring"
#use "Libs/SCI/Graphics"

#use "script/use/need"


int cashlimit
Init
cashlimit = 300000000 / __skill
End

#macro balancelimit 1000000000

var IMGUP
var IMGDOWN
var CIJFERS
var FONT
var CASH
var BALANCE
var BACK

Init
IMGUP = TImage.Obtain("UP")
IMGDOWN = TImage.Obtain("DOWN")
CIJFERS = LinkFont("Fonts/ECN.jfbf","ECN")

FONT = GetFont("BIGTEXT")
CASH = FONT.iText("Shilders in cash:")
BALANCE = FONT.iText("Bank balance:")

BACK = TImage.Obtain("MENUBACK")
End


group Transfer
	string A
	bool hover = false
	int position
	int bpos
	
	get int bpv
		return math.ceil((10^(self.bpos))/10)
	end
	
	void D()
		if __bank+self.bpv>balancelimit
			// balancelimit is a macro only holding a numberic value, 
			// so doing this is safe as the computer will substitue the 
			// macro prior to actual compiling!
			Events.Annoy("You cannot do this transaction! The max balance is balancelimit shilders")
			return
		end
		if (__cash>=self.bpv)
			__cash -= self.bpv
			__bank += self.bpv
		end
		CSayF("Transfer: %10d => %10d (deposit %d)",__cash,__bank,self.bpv)
	end
	
	void W()
		if __cash+self.bpv>cashlimit
			// Cash limit is a variable, and this this approach was needed!
			Events.Annoy(sprintf("You cannot do this transaction! The max balance is %d",cashlimit))
		end
		if (__bank>=self.bpv)
			__cash += self.bpv
			__bank -= self.bpv
		end
		CSayF("Transfer: %10d <= %10d (withdraw %d)",__cash,__bank,self.bpv)
	end
	
end

global void PartyClick(int num)
	// GoMenu(num,"Field")
	GoToFlow("FIELD")
end



global void MainFlow()
//global void BUB_Draw()
	// start
	BACK.Tile(0,0,Screen.W,Screen.H)
	
	// do
	__amber
	CASH.Draw(10,10)
	BALANCE.Draw(10,200)

	string scash
	string sbank
	scash = tostring(__cash)
	sbank = tostring(__bank)
	
	
	Transfer.hover = false
	
	for i=1,Len(scash)
		int j
		int x
		j = (1 + Len(scash))-i
		x = (Screen.W - 50) - (i*100)
		__white
		if (Mouse.X>x) and (Mouse.X<x+90) and Mouse.Y>40 and Mouse.Y<150
			Transfer.A = "D"
			Transfer.position = j
			Transfer.bpos = i
			Transfer.hover = true
			Color(160,180,255)
		end
		CIJFERS.Text(mid(scash,j,1),x,40)
	end

	for i=1,Len(sbank)
		int j
		int x
		j = (1 + Len(sbank))-i
		x = (Screen.W - 50) - (i*100)
		__white
		if (Mouse.X>x) and (Mouse.X<x+90) and Mouse.Y>250 and Mouse.Y<360
			Transfer.A = "W"
			Transfer.position = j
			Transfer.bpos = i
			Transfer.hover = true
			Color(160,180,255)
		end
		CIJFERS.Text(mid(sbank,j,1),x,250)
	end

		
	// end
	Party.SelectedCharacter=0
	Party.ShowBar()
	Achievements.DrawAll()
	__white
	Mouse.Show()
//end

//global void BUB_Update()
//	Dev.ConCheck()
	Achievements.Auto()
	Party.Click()
	
	if Mouse.HitLeft and Transfer.hover
		Transfer[Transfer.A]()
	end
end
