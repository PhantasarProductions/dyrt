// License:
// 	  src/Script/Script/Flow/FlowBoxText.scyndi
// 
// 	  Version: 25.04.01 XIV
// 	
// 	  Copyright (C) 2019, 2020, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License


Script

#use "libs/sci/sys"
#use "Libs/SCI/Intervar"
#use "script/use/need"
#use "script/use/misc/boxes"
#use "script/use/misc/boxpics"
#use "libs/sci/sstring"
#use "Libs/SCI/JCR6"
#use "libs/DyrtScenario"
//#use "libs/DarkText"

#macro __BoxTextTotalWidthMargin 225
#macro __BoxTextFontSize 25
#macro __BoxText_MinX 200

//locExtern Scenario "Scyndi.Class.Scen"
//Link Scenario = Lua.Scyndi.Class.Scen

QuickMeta Scenario
	Index
		return scen[key]
	end
	NewIndex
		scen[key]=value
	end
end

table LoadedPortret
void InitScenario()

	CSay("Configuring Scenario library")

	// Set Language
	Scenario.lang = __lang
	CsayF("Language: %s",__lang)
	
	// Link JCR to the scenario library
	//Scenario.JCR_Lines = table(string file)
	ddef SJCRL
		string File = infinity
		string content
		content = JCR6.GetString(file)
		return xsplit(content,"\n")
	end
	Scenario.JCR_Lines = SJCRL
	
	Scenario.print = CSay
	Scenario.JCR_Exists = JCR6.EntryExists
	
	CSay("System stuff")
	
	//bool ImageLoaded(string tag)
	//	return LoadedPortret[tag]!=nil;
	//end
	//Image.Loaded = ImageLoaded
	//Image.Exists = JCR_Exists
	
end

class TextBox
	// real class
	string Header
	string PicDir
	string PicSpc
	string PicRef	
	table Lines
	int SL
	int SP
	string AltTxtFont
	string Voice
	int width
	var txtbox
	
	get int boxheight
		r:= txtbox.h
		return r
	end
	
	get int boxy
		return Screen.Height - boxheight
	end
	
	CONSTRUCTOR(initcrap)
		CSay("Creating textbox!")
		for k,v in pairs(initcrap)
			CSayF("%s %s = %s",type(v),k,tostring(v))
			self[k] = v
		end
		for k,v in pairs(initcrap.Lines); print(k,v); End
		CSay("Done!")
	end
	
	DESTRUCTOR
		if not self.txtbox
			return
		end
		for ibox,ilnk in Box.List.Each
			if ibox==self.txtbox 
				ilnk.UnLink()
			end
		end
	end
	
	void Show()
	
		var Font
		
		Font = GetFont("BOXTEXT")
		
		self.txtbox.Draw()
		
		__white
		BoxPic(20,self.boxy+math.floor(self.boxheight/2),self.PicDir,self.PicSpc,"center")
		// CSayF("DEBUG: y:%4d; h:%4d; c:%4d",self.boxy,self.boxheight,self.boxy+math.floor(self.boxheight/2)) // debug! Must be commented out in distributions!!!
		
		Color(255,180,0)
		//DarkText.Font(Font,self.Header,__BoxText_MinX,self.boxy+10)
		Font.Dark(self.Header,__BoxText_MinX,self.boxy+10)
		
		__white
		for i,l in pairs(self.Lines)
			//print(i,l,len(l),SL,SP)
			int p
			if i<self.SL
				p = len(l)
			elseif i==self.SL
				p = self.SP
				self.SP++
				if self.SP>=len(l)
					self.SP=1
					self.SL++
				end
			else
				p=0
			end
			if p>0
				//DarkText.Font(Font,Left(l,p),__BoxText_MinX,(self.boxy+35)+(i*21))
				Font.Dark(Left(l,p),__BoxText_MinX,(self.boxy+35)+(i*21))
			end
		end
	end
	
	// link up static shit
	static table btdata
	//link btdata = Scenario.btdata
	static var Current
	link Portraits = LoadedPortret
	
	static void Generate(string file, string tag,int idx,string boxback)
		//var this
		var f
		var t
		var rec
		table sb_data
		int width
		var CurrentFont
		TextBox.btdata = Scenario.btdata
		//this = new TextBox
		//TextBox.Current = this
		//--	function RunBoxText(file,tag,idx,boxback)
		//-- if not ReInit then 
		//--	Graphics_Init()  
		//--	ReInit = true
		//--	This prevents the Text Box to be drawn based on wrong settings.
		//-- end  
		CSayF("Generate('%s', '%s', %4d, '%s') -- START!",file, tag, idx, boxback)
		f = TextBox.btdata[file]
		if ! f  
			//CSay(NIL.LuaSerialize("btdata",TextBox.btdata))
			error("Boxtext file '"..file.."' has not yet been loaded!") 
		end
		tag = Upper(tag)
		t = f[tag]
		if ! t  
			//CSay(NIL.LuaSerialize("btdata",TextBox.btdata))
			error("Boxtext file '"..file.."' has no tag called '"..tag.."'") 
		end
		rec = t[idx]
		if ! rec  
			//CSay(NIL.LuaSerialize("btdata",TextBox.btdata))
			error("Boxtext file '"..file.."' tag '"..tag.."' does not have a record #"..idx.." (max is "..len(t)..")") 
		end
		CSay("= Start sb_data")
		if Upper(rec.PicDir)=="ERIC" && __EricIsYasathar
			rec.PicDir="Yasathar"
		end
		sb_data = new TextBox( { ["Header"] = gSub(rec.Header), ["PicDir"] = rec.PicDir, ["PicSpc"] = rec.PicSpc, ["Lines"] = {}, ["SL"] = 1, ["SP"]=1, ["AltTxtFont"] = rec.AltTxtFont, ["Voice"] = rec.SoundFile   } )
		TextBox.Current = sb_data
		width=Screen.Width-__BoxTextTotalWidthMargin //-- standard width, this can be shortened by the portraits popping with the textbox. SW is the screen width, this need to be taken in order.
		//local ak,txt,cline,spline
		//local aw,word
		//local continue
		if rec.PicRef
			// TODO: Proper Image loading
			//width = width - Image.Width(rec.PicRef)   
		end
		if rec.AltTxtFont and rec.AltTxtFont!="" 
			// CSay("Setting font: "..rec.AltTxtFont,fonts.BoxText[2])
			CurrentFont = error("No alternate font possibility yet! Code me, please!") //Image.Font(rec.AltTxtFont,fonts.BoxText[2])
		else
			CurrentFont = GetFont("BOXTEXT") //setfont("BoxTextContent")
		end   
		CSay("= Textwrapping!")
		for ak,txt in lua.ipairs(rec.Lines) 
			string cline
			table spline
			cline = ""
			//spline = split(Var.S(txt)," ")
			spline = xsplit(gSUB(txt)," ")
			for aw,word in ipairs(spline) 
				if CurrentFont.Width(cline..word)>width
					Lua.table.insert(sb_data.Lines,cline)
					cline = ""
				end
				cline = cline .. word .. " "   
			end
			if cline!=""; Lua.table.insert(sb_data.Lines,cline); end    
		end
		CSay("= Config portrait!")
		sb_data.width=width    
		sb_data.PicRef=rec.PicRef
		//-- if tonumber(LC('screen.margin.top')   )!=0 then origin[2] = 25; totalwidth=totalheight-25 end
		// if tonumber(LC('screen.margin.right') )!=0 then sb_data.width=sb_data.width-25 end
		// if tonumber(LC('screen.margin.left') )!=0 then sb_data.width=sb_data.width-25 end
		//-- Voice acting, if available
		CSay("= The Voide of Phantasar")
		if sb_data.Voice && JCR6.EntryExists(sb_data.Voice) 		
			// This is all LAURA, but NALA must be handled differently, so let's comment this out... for now!
			// if Audio.Playing('BOXTEXTCHANNEL')!=0 then Audio.Stop('BOXTEXTCHANNEL') end
			// Audio.Load(sb_data.Voice,'BOXTEXTVOICE')
			// Audio.Play("BOXTEXTVOICE","BOXTEXTCHANNEL")
		else
			sb_data.Voice=nil;
		end
		
		do
			CSay("Calculating box size")
			int h
			locExtern HashTag "#"
			h = (HashTag(sb_data.Lines)*(__BoxTextFontSize+2))+50
			if h<150; h=150; end
			CSayF("Creating a box that is %d pixels high",h)
			sb_data.txtbox = new Box(0,Screen.Height-h,Screen.Width,h)
			CSayF("So far so good!")
		end
		CSay("= That should do it!")
	end

end


group FlowBoxText
	
	string Tag
	int Num
	string Scen
	string ReturnFlow
	table btdata
	
	//void CONSTRUCTOR()
	//	InitScenario()
	//end
	
	void InitBTFlow(string AScen, string ATag, RF, ANum)
		self.ReturnFlow = RF or CurrentFlow()
		self.Num = ANum or 1
		self.Scen = AScen
		self.Tag = Upper(ATag)
		GoToFlow("BOXTEXT")
		TextBox.Generate(trim(AScen),trim(ATag),ANum,RF)
	end
	
	void Next()
		locExtern _len "#"
		self.Num++
		if self.Num>_len(TextBox.btdata[trim(self.Scen)][trim(self.Tag)])
			GoToFlow(trim(replace(self.ReturnFlow,"FLOW_","")))
		else
			TextBox.Generate(trim(self.Scen),trim(self.Tag),self.Num,self.ReturnFlow)
		end
	end
	
end

Init
	InitScenario()
End


global void BUB_Draw()
	//LuaDoString(trim(FlowBoxText.ReturnFlow),"BoxText_Back()","BoxText BackGrCall: ("..trim(FlowBoxText.ReturnFlow)..")")
	Sys.Call(trim(FlowBoxText.ReturnFlow),"BoxText_Back")
	TextBox.Current.Show()
	
	// Draw all achievement boxes
	Achievements.DrawAll()

	
	__white
	Mouse.Show()
		
end

global void BUB_Update()
	// debug
	//Dev.ConCheck()
	QuitRequest()
	
	// Time
	Time.Update()

	
	// Click and move on to the next, or return to the correct flow
	if Mouse.HitLeft
		//|| Keyboard.Name=="Enter" || Keyboard.Name=="Space"
		FlowBoxText.Next()
	end
end

global void MainFlow()
	BUB_Update()
	BUB_Draw()
End
