// License Information:
// src/Tricky Script/Script/Flow/SaveGameManager.nil
// Version: 19.08.15
// Copyright (C)  Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "script/use/anyway"
#use "script/use/boxes"
#use "libs/linkedlist"
#use "libs/roman"

#macro __GameName Dyrt.NET

global delegate BUB_Draw
global delegate BUB_Update
global delegate BUB_Arrive
global delegate BUB_Load

class SG
	
	static var SmallFont
	static table SkillNames
	static string mode
	static var ZijBalk
	
	static var List
	static int HighID
	
	static table Pics
	static table PicImages
	static bool PicsInitDone
	static table lvlPic
	
	static var BigNumbers
	static var Font
	
	static var Hover
	
	int ID
	string Location
	int Skill = 2
	string Language
	string Time
	table PartyNames
	table PartyLevels
	static int ScrollY
	var SlotBox
	
	void CONSTRUCTOR()
		self.List = self.List or new TLinkedList // Should already be done, but to make sure!
		self.List.AddLast(self)
		//self.HighID++
		//self.ID = self.HighID
		// Init Pics
		if not self.PicsInitDone
			table TruePics
			int MaxPics
			TruePics = { "Eric","Irravonia","Brendor","Scyndi","Rebecca","Dernor","Merya","Aziella" }
			MaxPics = #TruePics
			setmetatable(self.Pics,{
				["__index"] = string(t,int i)
					int modulo
					modulo = (i % MaxPics)+1
					//if modulo == 0 then modulo = MaxPics end
					return TruePics[modulo]
				end,
				["__newindex"] = void(t,i,v)
					error("SGData.Pics happens to be readonly and therefore no data may be assigned to it!")
				end
			})
			self.PicsInitDone = true
		end
	end

	// Action
	static void Update_Boxes()
		string output
		for item in SG.List.Each
			if item.ID>=0
				output = output .. sprintf("NEW:%d\nLocation:%s\nLanguage:%s\nTime:%s\nSkill:%d",item.ID,item.Location,item.Language,item.Time,item.Skill)
				with item
					for i=1,8
						if $PartyNames[i] and $PartyNames[i]!=""
							output = output .. sprintf("CharTag.%d:%s\nCharLvl.%d:%s\n",i,$PartyNames[i],i,$PartyLevels[i])
						end
					end
				end
			end
		end
		output = output .. sprintf("HighID:%d",$HighID)
		while not BubSave.SaveString(output,"Save/__GameName.Directory",true)
			string antwoord
			antwoord = FailureBox("Saving the directory data failed.\nThis data is essential, as bad stuff can happen when this data is not in sync with the savegame files!\n- Do you have write permissions to the folder where this data is saved\n-Do you have write permissions over the file itself?\n- It's also possible there was a little 'hardware hiccup', in that case just try it again!\n- Is the devide on which you store save games still in fully operational state?\nTry to find that out, please!")
			switch antwoord
				case "Abort"
					error("Error saving savegame directory")
				case "Ignore"
					Annoy("I'll try to continue like nothing happened, but be prepared for some permanent damage, and awkward behavior from the savegame directory in the future")
					GoToFlow("FIELD")
					break
				case "Retry"
					Annoy("Alright, let's try that again!")
				default
					// This should never be possible, but just in case!
					// I've seen crazier things, after all :P
					error("Unknown answer from failurebox!") 				
			end
		end		
	end
	
	static void SaveData(string File)
		// The reason I put this in a separate function is actually for 
		// my own needs alone, and not those of the player. In order to
		// make debugging easier, I'll require tons of savegames, which
		// I can more easily set up by doing it like this!
	end
	
	void Perform_Save()
		int myID
		bool NewSlot
		myID = $ID
		CSay("Prepare to save!")
		if myID<0
			CSay("= Generating new ID")
			myID = $HighID
			$ID=myID
			$HighID++
			CSayF("= ID is now %d",$ID)
			NewSlot=true
		end
		CSay("= Base configuration!")
		$Location = Field.MapData.Title
		$Skill = __skill
		$Language = __lang
		$PartyNames = {}
		$PartyLevels = {}
		CSay("= Character outline")
		for i=1,8
			if RPG.Party[i] and RPG.Party[i]!=""
				$PartyNames[i] = RPG.Party[i]
				$PartyLevels[i] = RPG.Char(RPG.Party[i]).Stat("Level").Value
			end
		end
		CSay("= Grab the time!")
		$Time = Time.PlayTime
		CSay("= Saving")
		$SaveData("Save/__GameName.%d",$ID)
		CSay("= Updating directory!")
		$Update_Boxes()
		if NewSlot
			var newitem
			newitem = new SG
			with newitem
				$ID=-10
				$Location = "<< Create New File >>"
				$SlotBox = new Box(0,0,Screen.Width-40,128)
			end
		end
	end
	
	void Perform_Load()
		error("Loading has not yet been implemented!")
	end
	
	void Perform_Delete()
		if $ID<0
			// $ID being lower than zero would mean this is the 'create new savegame' slot
			// Since that slot means the file does not exist, it's completely senseless
			// to even try to delete that (plus it will result in crashses too), so let's
			// butt out, before that happens, shall we?
			return
		end
		error("Deleting has not yet been implemented!")
	end
	

	// Callbacks
	static void Draw()
		__white
		// Originally these numbers were used in the ECN bar, but as I don't plan
		// To get that one back, I decided to use these numbers for THIS purpose :)		
		SG.BigNumbers = SG.BigNumbers or LoadImageFont("Fonts/ECN.jfbf")
		// Let's first draw the slots
		int Y
		$Hover = nil;
		for item in SG.List.Each
			if item.ID>=0 or SG.mode == "SAVE"
				item.SlotBox.y = Y - SG.ScrollY
				item.SlotBox.Draw()
				if item.ID>=0
					string Pic
					Pic = self.Pics[item.ID]
					__white
					$PicImages[Pic] = $PicImages[Pic] or LoadImage(sprintf("gfx/boxpic/%s/General.png",Pic))
					$PicImages[Pic].Draw(5, (item.SlotBox.y+64)-($PicImages[Pic].Height/2))
					GraphColor.Alpha = 100
					self.BigNumbers.DrawText( tostring(item.ID) , 120, item.SlotBox.y+20 )
					GraphColor.Alpha = 255
				end
				if Mouse.X<Screen.Width-40 and Mouse.Y>item.SlotBox.y and Mouse.Y<item.SlotBox.y+128
					$Hover = item
					Color(255,180,0)
				else
					__white
				end
				$Font.DrawText(item.Location,122,item.SlotBox.y+20)
				if item.ID>=0
					$SmallFont.DrawText(sprintf("Lang: %s; %s",item.Language,$SkillNames[item.Skill]),122,item.SlotBox.y+45)
					$SmallFont.DrawText(sprintf("Time: %s",item.Time),122,item.SlotBox.y+65)
				end
				__white
				for i=1,8
					with item
						string TAG
						int LVL
						int x
						int y
						TAG = $PartyNames[i]
						LVL = $PartyLevels[i]
						if TAG and TAG!=""
							$lvlPic[TAG] = $lvlPic[TAG] or LoadImage(sprintf("gfx/actors/heroes/%s.South.jpbf/00000000.png",TAG))
							x = (($SlotBox.x+$SlotBox.w)-(50*8))+i*40
							y = ($SlotBox.y+20)
							$lvlPic[TAG].Draw(x-($lvlPic[TAG].Width/2),y)
							$SmallFont.DrawText(roman(LVL),x,y+60,2)
						end
					end
				end
			end
			Y = Y + 128
		end
		// And now the sidebar
		$ZijBalk.Draw()
		__white
		if $ScrollY>0
			Arrow.Up.Draw($ZijBalk.x+3,$ZijBalk.y+3)
		end
		if $List.Last and $List.Last.MyObject.SlotBox.y+128>Screen.Height
			Arrow.Down.Draw($ZijBalk.x+4,($ZijBalk.y+$ZijBalk.h)-35)
		end
		
		// Mouse Pointer
		__white
		Mouse.Show()
	end
	
	static void ScrollUp()
		if $ScrollY>0
			$ScrollY--
		end
	end
	
	static void ScrollDown()
		var lastbox		
		if not $List.Last
			return
		end
		lastbox = $List.Last.MyObject		
		//CSayF("DEBUG: ID = %03d; y = %04d; y+128 = %04d; Screen Height: %04d",lastbox.ID,lastbox.SlotBox.y,lastbox.SlotBox.y+128,Screen.Height)
		//CSayF("DEBUG: %4d < %4d ??? ",$ScrollY,(lastbox.SlotBox.y+128)-Screen.Height)
		//if $ScrollY<(lastbox.SlotBox.y+128)-Screen.Height
		if (lastbox.SlotBox.y+128)>Screen.Height
			$ScrollY++
		end
	end

	static void Update()
		// debug
		Dev.ConCheck()
		
		if Mouse.HitLeft 
			if $Hover
				switch $mode:upper()
					case "SAVE"
						$Hover.Perform_Save()
				end
			end
		end
		if Mouse.HeldLeft
			if Mouse.X>$ZijBalk.x
				if Mouse.Y<$ZijBalk.y+40
					$ScrollUp()
				elseif Mouse.Y>($ZijBalk.y+$ZijBalk.h)-40
					$ScrollDown()
				end
			end
		end
		if Keyboard.Held("Up") 
			$ScrollUp()
		elseif Keyboard.Held("Down")
			$ScrollDown()
		end
	end

	static void Arrive()
		CSayF("Arrived in the save game manager with mode '%s'",$mode)
	end
	
	static void Load()
		CSay("Welcome to the save game manager! I need to configure some things first")
		Box.NeverList = true
		CSay("= Side Bar")
		SG.ZijBalk = new Box(Screen.Width-40,0,40,Screen.Height)
		CSay("= Create list of slots")
		SG.List = new TLinkedList
		CSay("= Check directory file: Save/__GameName.Directory")
		if BubSave.Exists("Save/__GameName.Directory")
			CSay("= Since it exists! Let's load it!")
			table sgdirLines
			sgdirLines = BubSave.LoadLines("Save/__GameName.Directory")
			CSay("= Got it, let's not break it all down!")
			CSay(type(sgdirLines))
			var NSG
			for i,line in ipairs(sgdirLines)
				Dev.Log(sprintf("line %i > %s",i,line))
				table sp
				string cmd
				string para
				sp = { "","" }
				int p = 1
				if trim(line)!=""
					for j=1,#line
						string ch
						ch = Mid(line,j,1)
						if ch==":" and p!=2
							p=2
						else
							sp[p] = sp[p] .. ch
						end
					end				
					cmd=sp[1]
					para=sp[2]
					switch cmd
						case "NEW"
							NSG = new SG
							NSG.ID = tonumber(para);
							NSG.SlotBox = new Box(0,0,Screen.Width-40,128)
						case "Location"
							NSG.Location = para
						case "Language"
							NSG.Language = para
						case "Time"
							NSG.Time = para
						case "Skill"
							NSG.Skill = tonumber(para) or 2
						case "CharTag.1" "CharTag.2" "CharTag.3" "CharTag.4" "CharTag.5" "CharTag.6" "CharTag.7" "CharTag.8"
							int idx
							idx = tonumber(Right(cmd,1))
							NSG.PartyNames[idx] = para
						case "CharLvl.1" "CharLvl.2" "CharLvl.3" "CharLvl.4" "CharLvl.5" "CharLvl.6" "CharLvl.7" "CharLvl.8"
							int idx
							idx = tonumber(Right(cmd,1))
							NSG.PartyLevels[idx] = tonumber(para) or 1
						case "HighID"
							SG.HighID = tonumber(para)
						default
							error("Unknown directory command: "..cmd.." in line "..i.."\n\nMessed with the savegame directory file?")
					end
				end
			end
		else
			CWriteLine("NOTE: The __GameName.Directory file does not yet exist! If no savegames have been made before this is normal",255,0,0)
		end
		CSay("= Create NewGame slot for the creation of a new save game file")
		var NewGame
		if $mode=="SAVE"
			NewGame = new SG
			with NewGame
				$ID = -1 // Marks a new savegame file
				$Location = "<< CREATE NEW FILE >>"
				$SlotBox = new Box(0,0,Screen.Width-40,128)
				CSayF("= 'NEW FILE' slot created as %d",$ID)
			end
			CSay("= Add this slot to the list!")
			SG.List.AddLast(NewGame)
		end
		CSay("= Obtain font!")
		SG.Font = GetFont("BOXTEXT")
		CSay("= Dupe removal")
		SG.List.RemoveDupes()
		CSay("= Small Font")
		$SmallFont = LoadImageFont("Fonts/Coolvetica.12.jfbf")
		CSay("= Skill Names")
		$SkillNames[1] = "Easy mode"
		$SkillNames[2] = "Casual mode"
		$SkillNames[3] = "Hard mode"
		CSay("All done, let's move on to the next step!")		
	end
end


BUB_Draw=SG.Draw
BUB_Update=SG.Update
BUB_Arrive=SG.Arrive
BUB_Load=SG.Load







