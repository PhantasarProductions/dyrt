// License:
// **********************************************
// 
// src/Script/Script/Use/MapScript/Dernor.scyndi
// (c) Jeroen Broks, 2020, 2025, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// 
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// 
// version: 25.05.21 XVIII
// 
// End License

#use "libs/sci/sys"
#use "libs/sci/kthura"
#use "libs/sci/sstring"
#use "libs/sci/intervar"

//#use "libs/strings"
//#use "libs/tables"
#use "libs/xmath"

module 
//ModuleDernorNatureVision

	table Objects = {}
	
	table distances = {}
	
	number Dist(int x1, int y1, int x2, int y2)
		string t
		t = sprintf("%4d.%4d.%4d.%4d",x1,y1,x2,y2)
		distances[t] = distances[t] || xmath.Pythagoras(x1,y1,x2,y2)
		return distances[t]
	end
	
	void DInit(int Layers)
		Objects = {}
		for i=1,Layers
			string L
			LT:={}
			L = sprintf("#%03d",i)
			Kthura.CurrentLayer = L
			Objects[L]=LT
			for _tag in each(Kthura.TagList) 
			//Map.EachTag
				tag:=Upper(_Tag)
				if prefixed(tag,"DERNVIS") || prefixed(tag,"DERNINVIS") || prefixed(tag,"VISDERN")
					//Map.Obj = tag
					LT+={ ["tag"]=tag, ["show"] = prefixed(Upper(tag),"DERNVIS") || prefixed(Upper(tag),"VISDERN"), ["x"] = Kthura.Obj[tag].X, ["y"] = Kthura.Obj[tag].Y, ["last"] = 1234  }
					CSayF("Added %s (layer %s)",tag,L)
					//CSay(NIL.LuaSerialize("data",LT[#LT]))
				end
			end
		end
		for k,h in pairs(Objects)
			CSayF("Marsh objects in layer: %s (%d)",k,len(h))
		End
	end
	
	void Update(string L)
		if ! Objects[L]
			//CSayF("No crap for layer '%s'! Next!",L)
			return
		end
		int PX
		int PY
		PLY:=Kthura.Obj.Player
		//Map.Obj = "Player"
		PX = PLY.X
		PY = PLY.Y
		for o in each(Objects[L])
			number distance
			number alpha
			// Map.Obj = tag
			//CSayF("%s::%s Player(%4d,%4d); Object(%4d,%4d)",L,o.tag,PX,PY,o.x,o.y)
			if math.abs(PX-o.x)>200 || math.abs(PY-o.y)>200
				alpha = 1000
				distance = 5000
			elseif gstr.Field_Leader == "Dernor"
				// distance = xmath.Pythagoras(PX,PY,Map.ObjInt.X,Map.ObjInt.Y)
				distance = Dist(PX,PY,o.x,o.y)
				alpha = math.floor(distance) * 5
				//CSayF("Player(%4d,%4d); Object %s(%4d,%4d); Distance(%5.2f); Alpha:%04d",PX,PY,tag,Map.ObjInt.X,Map.ObjInt.Y,distance,alpha)
				if alpha>1000
					alpha = 1000
				elseif alpha<0
					alpha = 0
				end
			else
				alpha = 1000
			end
			// Kthura no longer supports the 0 to 1000 scale for alpha
			  
			if o.last!=distance
				int alpha255:= math.floor( (alpha/1000) * 255)
				if o.show
					//Map.Obj = o.tag
					//Map.ObjInt.Alpha = 1000 - alpha
					Kthura.Obj[o.tag].Alpha=255-alpha255
					o.last=distance
				else 
					//Map.Obj = o.tag
					//Map.ObjInt.Alpha = alpha
					Kthura.Obj[o.tag].Alpha=Alpha255
					o.last=distance
				end
			end
		end
	end

//end
