// License Information:
// src/Tricky Script/Script/Use/Link/Field_h.nil
// Version: 19.11.28
// Copyright (C)  Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "libs/strings"

void FieldCheck()
	assert(StateExists("FLOW_FIELD"),"Request to field done, while the field flow has not yet been loaded")
end

void FLD_Exe(string do_it)
	FieldCheck()
	LuaDoString("FLOW_FIELD",do_it,"Call flow: FIELD") // Since the Lua and NIL instructions would both be the same, using NIL is pointless and would only down the real-time performance.
end

string FLD_GetString(string vr)
	FieldCheck()
	return LuaGetString("FLOW_FIELD",vr)
end

int FLD_GetInt(string vr)
	FieldCheck()
	return LuaGetInt("FLOW_FIELD",vr)
end

bool FLD_GetBool(string vr)
	FieldCheck()
	return LuaGetBool("FLOW_FIELD",vr)
end

group Map
	link Script = MapScript
	readonly table Data
	
	void ZA_New(string event,string zone,string Action,infinity)
		string params
		string actiondelegate
		table ActSplit
		ActSplit = split(Action,":")
		for i,v in pairs {infinity}
			if i>1 
				params = params .. ", "
			end
			switch type(v)
				case 'string'
					params = params .. '"'..SafeString(v)..'"'
				case 'number' 'boolean'
					params = params .. tostring(v)
				default
					error(sprintf("ZA_New(): Type '"..type(v).."' (parameter #%d) cannot be transferred through this linking routing!",i))
			end
		end
		assert(#ActSplit>0,"Action error in ZA_New")
		if #ActSplit==1
			ActSplit[2] = ActSplit[1]
			ActSplit[1] = "MAPSCRIPT"
		end
		switch ActSplit[1]:upper()
			case "MAPSCRIPT"
				actiondelegate = sprintf("MapScript.%s",ActSplit[2])
			case "SASKIA"
				actiondelegate = sprintf("MapScript.SASKIA")
				if params!=""
					CSay("WARNING! Parameters in SASKIA script are alwas ignored!")
				end
				params = ActSplit[2]
			default
				error(sprintf("I don't know how to handle: %s",ActSplit[1]))
		end
		if params==""
			FLD_Exe(sprintf("ZoneAction(trim(\"%s\"),trim(\"%s\"),%s)",event,zone,actiondelegate))
		else
			FLD_Exe(sprintf("ZoneAction(trim(\"%s\"),trim(\"%s\"),%s,'%s')",event,zone,actiondelegate,params))
		end
	end
	
	void ZA_Enter(string zone, string action,infinity)
		$ZA_New("Enter",zone,action,infinity)
	end
	
	void ZA_Leave(string zone, string action,infinity)
		$ZA_New("Leave",zone,action,infinity)
	end

	void ZA_Cycle(string zone, string action,infinity)
		$ZA_Cycle("Leave",zone,action,infinity)
	end
	
	void Kill(string objtag, perma)
		FLD_Exe(sprintf("FieldMap.Kill(trim(\"%s\"),%s)",objtag,tostring(perma==true)))
	end
	
	void SpawnPlayer(string spot,altwind)
		if altwind
			assert(type(altwind)=="string","If 'altwind' is set, it MUST be a string. Got "..type(altwind))
			FLD_Exe(sprintf("FlowField.SpawnPlayer(trim(\"%s\"),\"%s\")",trim(spot),altwind))
		else
			FLD_Exe(sprintf("FlowField.SpawnPlayer(trim(\"%s\"))",trim(spot)))
		end
	end
	
	void GoToLayer(string Layer,string Exit,AltWind)
		$Kill("PLAYER")
		FLD_Exe(sprintf("FieldMap.Kthura.Layer = trim(\"%s\")",Layer))
		$SpawnPlayer(trim(Exit),AltWind)
	end	
	
	get string Layer
		return LuaGetString("FLOW_FIELD","FieldMap.Kthura.Layer")
	end
	
	void HideByLabel(string label)
		FLD_Exe(sprintf("FlowField.Map.Kthura.HideByLabel(trim('%s'))",label))
	end

	void ShowByLabel(string label)		
		FLD_Exe(sprintf("FlowField.Map.Kthura.ShowByLabel(trim('%s'))",label))
	end
	
	void StopWalking()
		FLD_Exe("FlowField.Map.Kthura.Actor.Player.Walking = false\nFlowField.WalkArrival = nil")
	end
	
	void WalkTo(A,B,C)
		if type(A)=="string"
			FLD_Exe(sprintf("FlowField.Map.Kthura.Actor.Player.WalkTo(trim(\"%s\"))",A))
		else
			FLD_Exe(sprintf("FlowField.Map.Kthura.Actor.Player.WalkTo(%d,%d,%s)",A,B,tostring(C!=false)))
		end
	end
	
	void Hide(string tag)
		FLD_Exe("FieldMap.Hide('"..tag.."')")
	end
	
	void Show(string tag)
		FLD_Exe("FieldMap.Show('"..tag.."')")
	end
	
	void Click(string tag, string func, infinity)
		string args
		for i,v in ipairs { infinity }
			if i>1 
				args = args .. ", "
			end
			switch type(v)
				case "number" "boolean" "nil"
					args = args .. tostring(v)
				case "string"
					args = args .. '\\"'..v..'\\"'
				default
					error("Click cannot linkthrough with arguments of type "..type(v).. " (arg #"..i..")")
			end
		end
		FLD_Exe(sprintf("Clickables.FromTag(trim(\"%s\"),trim(\"%s\"), %s)", tag, func, args))
	end
	
	set string Obj
		FLD_Exe(sprintf("FlowField.Map.Kthura.Obj = trim(\"%s\")",value))
	end
	
	get string Obj
		return FLD_GetString("FlowField.Map.Kthura.Obj")
	end
	
	table ObjString
	table ObjInt
	table ObjBool
	
	void CONSTRUCTOR()
		CSay("Obj linking metatables")
		setmetatable(self.ObjString,{
			["__index"] = string(s,string k)
				return FLD_GetString(sprintf("FlowField.Map.Kthura.ObjString[trim(\"%s\")]",k))
			end,
			["__newindex"] = void(s,string k,string v)
				CSay(sprintf("==> Flow.Map.Kthura.ObjString[trim(\"%s\")] = trim(\"%s\")",k,v))
				FLD_Exe(sprintf("FlowField.Map.Kthura.ObjString[trim(\"%s\")] = trim(\"%s\")",k,v))
			end
		})
		setmetatable(self.ObjInt,{
			["__index"] = int(s,string k)
				return FLD_GetInt(sprintf("FlowField.Map.Kthura.ObjInt[trim(\"%s\")]",k))
			end,
			["__newindex"] = void(s,string k,int v)
				FLD_Exe(sprintf("FlowField.Map.Kthura.ObjInt[trim(\"%s\")] = %d",k,v))
			end
		})
		setmetatable(self.ObjBool,{
			["__index"] = boolean(s,string k)
				return FLD_GetBool(sprintf("FlowField.Map.Kthura.ObjInt[trim(\"%s\")]",k))
			end,
			["__newindex"] = void(s,string k,bool v)
				FLD_Exe(sprintf("FlowField.Map.Kthura.ObjInt[trim(\"%s\")] = %s",k,tostring(v)))
			end
		})
	end
	
end

group Field

	link Map = Map

	link ZA_Enter = Map.ZA_Enter
	link ZA_Leave = Map.ZA_Leave
	link ZA_Cycle = Map.ZA_Cycle
	
	link GoToLayer = Map.GoToLayer
	link SpawnPlayer = Map.SpawnPlayer

	void LoadMap(string MapFile)
		FLD_Exe(sprintf("FlowField.LoadMap(\"%s\")",MapFile))
	end

	void ChainMap(string MapFile,string SaskiaLabel)
		MapFile = Trim(MapFile)
		SaskiaLabel = Trim(SaskiaLabel)
		CSayF("FlowField.ChainMap(\"%s\",\"%s\")",MapFile,SaskiaLabel)
		FLD_Exe(sprintf("FlowField.ChainMap(\"%s\",\"%s\")",MapFile,SaskiaLabel))
	end
	
	
	link MapData = Map.Data
	
	void StopWalking()
		FLD_Exe("FlowField.Map.Kthura.Actor.Player.Walking = false\nFlowField.WalkArrival = nil")
	end
	
	get string Leader
		FieldCheck()
		return LuaGetString("FLOW_FIELD","FlowField.Leader")
	end
	
	set string Leader
		FLD_Exe(sprintf("FlowField.Leader = '%s'",value))
	end
	
	void CONSTRUCTOR()
		setmetatable(self.MapData,{
			['__newindex'] = void(t,string k,string v)
				FLD_Exe("FlowField.Map.Kthura.Data[\""..SafeString(k) .."\"] = \""..SafeString(v) .."\"")
			end,
			['__index'] = string(t,string k)
				FieldCheck()
				return LuaGetString("FLOW_FIELD","FlowField.Map.Kthura.Data[\""..SafeString(k) .."\"]","Getting Map Meta Data")
			end,
			['__call'] = string(t,string k)
				return $MapData[k]
			end
		})
	end
	
	
	
end	
















