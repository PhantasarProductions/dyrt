// License Information:
// src/Tricky Script/Script/Use/Link/IAA.nil
// Version: 19.12.16
// Copyright (C)  Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information



#macro __itemcap Inventory.__CAP__


void LoadSubIAA()
	if not StateExists("IAA")
		CSay("Loading sub: IAA")
		LoadState("IAA","Script/Subs/SubIAA.nil")
	end
end




quickmeta group Inventory
	newindex
		LoadSubIAA()
		LuaDoString("IAA","SubInventory['"..key.."'] = "..value,"Index inventory!")
	end
	
	index
		LoadSubIAA()
		if key=="__CAP__"
			switch __skill
				case 1
					return 50
				case 2
					return 25
				case 3
					return 5
				default
					error("Unknown difficulty setting!")
			end
		end
		return LuaGetInt("IAA","SubInventory['"..key.."']")
	end
	
	call
		LoadSubIAA()
		return LuaGetString("IAA","SubInventory()")
	end
	
	len
		LoadSubIAA()
		return LuaGetInt("IAA","#SubInventory")
	end
	
	gc
		CSay("This link inventory group has been destroyed")
		CSay("Please make sure this can only happen in the IAA state!")
	end
end

string CA_CHAR
quickmeta group CharAbilitiesMastered
	newindex
		assert(CA_CHAR!="","Illegal meta group call!")
		assert(type(value)=="boolean","Boolean value expected!")
		LoadSubIAA()
		if value==true
			LuaDoString("IAA",sprintf("SubAbilitiesMastered[\"trim(%s)\"][\"trim(%s)\"] = true",CA_CHAR,key) )
		else
			LuaDoString("IAA",sprintf("SubAbilitiesMastered[\"trim(%s)\"][\"trim(%s) = nil",CA_CHAR,key) )
		end
		CA_CHAR=""
	end
	
	index
		LoadSubIAA()
		assert(CA_CHAR!="","Illegal meta group call!")
		bool ret
		ret = LuaGetBool("IAA",sprintf("SubAbilitiesMastered[\"trim(%s)\"][\"trim(%s)\"] == true",CA_CHAR,key) )
		CA_CHAR=""
		return ret
	end
end

quickmeta group AbilitiesMastered
	index
		assert(CA_CHAR=="","Cyclic Abilities Mastered Call! ("..CA_CHAR..")")
		CA_CHAR=key
		if key=="Yasathar"
			CA_CHAR="Eric"
		end
		LoadSubIAA()
		LuaDoString("IAA",sprintf("SubAbilitiesMastered[\"trim(%s)\"] = SubAbilitiesMastered[\"trim(%s)\"] or {}",key,key),"IAA:ABIL:CreateCharIfNeeded")
		return CharAbilitiesMastered
	end
	newindex
		error("New indexes cannot be created in Abilities Mastered!")
	end
	call
		return LuaGetString("IAA","NIL.LuaSerialize(\"SubAbilitiesMastered\",SubAbilitiesMastered)")
	end
end

table LoadedItems
void CleanLoadedItems()
	LoadedItems = {}
end

quickmeta group Item
	index
		string k
		k = key:upper()
		switch k
			case "CLEAR" "CLEAN"
				return CleanLoadedItems
			default
				LoadedItems[k] = LoadedItems[k] or NIL.Use("Script/Data/IAA/"..k..".nil")
				// CSayF("Requested %s\n%s",k,NIL.LuaSerialize(k,LoadedItems[k]))
				return LoadedItems[k]
		end
	end
end