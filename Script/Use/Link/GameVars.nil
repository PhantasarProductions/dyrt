// License Information:
// src/Tricky Script/Script/Use/Link/GameVars.nil
// Game Vars
// version: 19.08.15
// Copyright (C)  Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information


// This is a safety pre-caution
#accept GAMEVARSCRIPT
if GAMEVARSCRIPT then return end


// declarations
global table gv
table gvbool
table gvnum
table gvnumber
table gvstring
table gvmeta
table gvmetabool
table gvmetanum
table gvmetastring
table inc
table incmeta
gvnumber = gvnum

int cd_garbage = 1000


global table Done
global table done
done = Done
table donemeta


// Communicate with the real code
void LoadSubVar()
	if not StateExists("GAMEVARS")
		CSay("Loading sub: GAMEVARS")
		LoadState("GAMEVARS","Script/Subs/SubGameVar.nil")
	end
end

string popCOMM()
	string ret
	ret = SuperGlobal.VarCommunicate
	SuperGlobal.VarCommunicate = ""
	return ret
end

// Clear all
global void gvClearAll()
	LoadSubVar()
	LuaDoString("GAMEVARS","varClear(false)")
end   
   

// Main metatable
gvmeta.__newindex = void(t,k,v)
	error("GameVars Type Indexes are READ-ONLY so you cannot assign any data to type "+k+"!")
end

#say Subber
string Subber(string str)
	LuaDoString("GAMEVARS","varSub(\"".. SafeString(str) .. "\")")
	return popCOMM()
end
#say "VarMetaIndex"
gvmeta.__index = var(t,k)
	LoadSubVar()
	switch k:upper()
		case "BOOL" "B" "&" "BOOLEAN" "BOOLE" "GEORGEBOOLE"
			return gvbool
		case "NUM" "NUMBER" "INT" "GETAL" "GRAHAM" "N" "%"
			return gvnumber
		case "STRING" "S" "$" "CHAR*"
			return gvstring
		case "DONE"
			return Done
		case "SUB"
			return Subber
		default
			error("Unknown GameVar type "..k)
	end
	cd_garbage = cd_garbage - 1
	if cd_garbage<=0
		CSay("GameVar Garbage Collecting")
		cd_garbage=1000
		LuaDoString("GAMEVARS","varClear(true)")
	end
end

gvmeta.__call = string(t)
	LoadSubVar()
	LuaDoString("GAMEVARS","varSerialize()")
	return popCOMM()
end

setmetatable(gv,gvmeta)

// Boolean Metatable
gvmetanum.__newindex = void(t,string k, int v)	
	LuaDoString("GAMEVARS",sprintf("varSet(\"Num\",\"%s\",%s)",SafeString(k:upper()), v))
end

gvmetanum.__index = int(t, string k)
	var r
	int r2 = 0
	LuaDoString("GAMEVARS",sprintf("varGet(\"Num\",\"%s\")",SafeString(k:upper())))
	r = popCOMM()
	switch type(r)
		case "number"
			r2 = r
		case "string"
			r2 = tonumber(r) or 0
	end
	return r2
end

gvmetanum.__call=int(t, string k)
	return gvnum[k]
end

setmetatable(gvnum,gvmetanum)

// Boolean Metatable
gvmetabool.__newindex = void(t,string k, bool v)
	LuaDoString("GAMEVARS",sprintf("varSet(\"Bool\",\"%s\",%s)",SafeString(k:upper()), v))
end

gvmetabool.__index = boolean(t, string k)
	var r
	LuaDoString("GAMEVARS",sprintf("varGet(\"Bool\",\"%s\")",SafeString(k:upper())))
	r = popCOMM()
	return r==true or r=='true'
end

gvmetabool.__call=boolean(t, string k)
	return gvbool[k]
end

setmetatable(gvbool,gvmetabool)



// String Metatable
gvmetastring.__newindex = void(t,string k, string v)
	LuaDoString("GAMEVARS",sprintf("varSet(\"String\",\"%s\",\"%s\")",trim(SafeString(k:upper())), SafeString(v)))
end

gvmetastring.__index =string(t, string k)
	LuaDoString("GAMEVARS",sprintf("varGet(\"String\",\"%s\")",trim(SafeString(k:upper()))))
	return popCOMM() or ""
end

gvmetabool.__call=boolean(t, string k)
	return gvbool[k]
end

setmetatable(gvstring,gvmetastring)


// Inc
incmeta.__newindex = void(t,string k, int value)
	gvbool[k] = gvbool + value
end

incmeta.__index = void()
	error("Inc is WRITE-ONLY!")
end

// Done
donemeta.__index = boolean(t,k)
	var r
	LuaDoString("GAMEVARS",sprintf("varDone(\"%s\")",SafeString(k:upper())))
	r = popCOMM()
	return r==true or r=='true'
end

donemeta.__newindex = void()
	error("Done is READ-ONLY!")
end
setmetatable(Done,donemeta)





