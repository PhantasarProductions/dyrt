// License:
// 	  src/Script/Script/Use/Need.ScyndiBundle/Need_Link_Achievements.scyndi
// 
// 	  Version: 25.03.25 III
// 	
// 	  Copyright (C) 2019, '20, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License



Module 

#use "Libs/SCI/Sys"

#use "Script/Use/Need.ScyndiBundle/Need_Convert_Flow"
#use "Script/Use/Need.ScyndiBundle/Need_Anyway_AlgemeneDefinities"

//global bool gj_failed = false

string aqv(arg)
	
	switch type(arg)
		case "nil"
			return "nil"
		case "string"
			return '"'..arg..'"'
		case "number" "boolean"
			return tostring(arg)
		case "table"
			string r
			for k,v in pairs(arg)
				if r!=""
					r = r .. ","
				end
				r = r .. "[ "..aqv(k).." ] = "..aqv(k)
			end
			return r
		default
			error("Achievement meta-group cannot parse a variable of type "..type(arg))
	end
	
end

quickmeta Achievements

	index
		//return void(infinity)
		ddef ret
			string para
			string command
			//for _,p in Lua.ipairs {infinity}
			//	if para!=""
			//		para = para .. ", "
			//	end
			//	para = para .. aqv(p)
			//end
			if ! StateExists("ACHIEVEMENTS")
				LoadState("ACHIEVEMENTS","Script/Subs/SubAchievements.nil")
			end
			//command = "F_Achievements."..key.."("..para..")"
			//LuaDoString("ACHIEVEMENTS",command,"Call sub: ACHIEVEMENTS") // Since the Lua and NIL instructions would both be the same, using NIL is pointless and would only down the real-time performance.
			Sys.Call("F_Achievements."..key,infinity)
		end
	end
		
	newindex
		Lua.error("Sorry, I cannot assign value '"..tostring(value).."' to "..tostring(key)..", as the achievement class is read-only!")		
	end
	
end	

//global var Trophy
//Trophy = Achievements
extern Trophy "Scyndi.Globals.Achievements"


global void AllSealedCheck()
	bool gotthemall = true
	for _,ch in ipairs {[0]="Eric","Irravonia","Brendor","Scyndi","Rebecca","Dernor","Merya","Aziella" }
		CSayF("Sealed Boss - Checking %s: %s; Complete %s",ch,tostring(SealedDefeated[ch]),tostring(gotthemall))
		gotthemall = gotthemall && SealedDefeated[ch]
	end
	if gotthemall
		Achievements.Award("SEALED_ALL")
	end
end


// NO LONGER NEEDED! May even be removed in the future, but let's dummy it for the time being!
//global void GJLOGINFAILED()
//	if not StateExists("ACHIEVEMENTS")
//		LoadState("ACHIEVEMENTS","Script/Subs/SubAchievements.nil")
//	end
//	LuaDoString("ACHIEVEMENTS","gjfailed = true")	
//end

//global bool gj_failed()
//	CSay("gj_failed() check")
//	if not StateExists("ACHIEVEMENTS")
//		CSay("Loading achievements sub")
//		LoadState("ACHIEVEMENTS","Script/Subs/SubAchievements.nil")
//	end
//	CSay("Did GJ fail to load or not?")
//	return LuaGetBool("ACHIEVEMENTS","gjfailed")
//end
