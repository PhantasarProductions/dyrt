// License:
// 	  src/Script/Script/Use/Need.ScyndiBundle/Need_Link_IAA.scyndi
// 
// 	  Version: 25.04.28
// 	
// 	  Copyright (C) 2019-'20, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License


Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/Events"
#use "Libs/SCI/SString"
#use "Libs/SCI/InterVar"

#use "Script/Use/Need.ScyndiBundle/Need_Convert_Flow"



//#macro __itemcap Inventory.__CAP__
Extern __ItemCap "Scyndi.Globals.Inventory.__CAP__"

LocExtern __skill "Scyndi.Globals.gInt.Skill"


void LoadSubIAA()
	if ! StateExists("IAA")
		Events.Poll()
		CSay("Loading sub: IAA")
		LoadState("IAA","Script/Subs/SubIAA.nil")
	end
end




quickmeta Inventory
	newindex
		LoadSubIAA()
		//LuaDoString("IAA","SubInventory['"..key.."'] = "..value,"Index inventory!")
		//Lua.error("Inventory not yet accessible for assigning data to "..key)
		Sys.Call("IAA","SetInv",Key,value)
	end
	
	index
		LoadSubIAA()
		if key=="__CAP__"
			switch __skill
				case 1
					return 50
				case 2
					return 25
				case 3
					return 5
				default
					error("Unknown difficulty setting!")
			end
		end
		//return LuaGetInt("IAA","SubInventory['"..key.."']")
		//Lua.error("Inventory not yet accessible for reading data from "..key)
		Return Sys.Call("IAA","GetInv",Key)
	end
	
	call
		// Needed to get the data for a savegame
		LoadSubIAA()
		//return LuaGetString("IAA","SubInventory()")
		R:=Sys.Call("IAA","SubInventory")
		return R
	end
	
	//len
	//	LoadSubIAA()
	//	return LuaGetInt("IAA","#SubInventory")
	//end
	
	//gc
	//	CSay("This link inventory group has been destroyed")
	//	CSay("Please make sure this can only happen in the IAA state!")
	//end
end

string CA_CHAR
quickmeta CharAbilitiesMastered
	newindex
		assert(CA_CHAR!="","Illegal meta group call!")
		assert(type(value)=="boolean","Boolean value expected!")
		LoadSubIAA()
		//Lua.error(sprintf("CharAbilitiesMastered not yet accessible for assinging %s to %s",value,key))
		//if value==true
		//	//LuaDoString("IAA",sprintf("SubAbilitiesMastered[trim(\"%s\")][trim(\"%s\")] = true",CA_CHAR,key) )			
		//else
		//	//LuaDoString("IAA",sprintf("SubAbilitiesMastered[trim(\"%s\")][trim(\"%s\")] = nil",CA_CHAR,key) )
		//end
		gbool[sprintf("AbilityMastered::%s::%s",CA_Char,key)] = Value
		CA_CHAR=""
	end
	
	index
		LoadSubIAA()
		assert(CA_CHAR!="","Illegal meta group call!")
		bool ret
		//ret = LuaGetBool("IAA",sprintf("SubAbilitiesMastered[trim(\"%s\")][trim(\"%s\")] == true",CA_CHAR,key) )
		//Lua.error(sprintf("CharAbilitiesMastered not yet accessible for reading from %s",key))
		ret = gbool[sprintf("AbilityMastered::%s::%s",CA_Char,key)]
		CA_CHAR=""
		return ret
	end
end

quickmeta AbilitiesMastered
	index
		//Lua.error(sprintf("AbilitiesMastered not yet accessible for reading from %s",key))
		assert(CA_CHAR=="","Cyclic Abilities Mastered Call! ("..CA_CHAR..")")
		CA_CHAR=key
		if key=="Yasathar"
			CA_CHAR="Eric"
		end
		LoadSubIAA()
		//LuaDoString("IAA",sprintf("SubAbilitiesMastered[trim(\"%s\")] = SubAbilitiesMastered[trim(\"%s\")] or {}",key,key),"IAA:ABIL:CreateCharIfNeeded")
		return CharAbilitiesMastered
	end
	newindex
		error("New indexes cannot be created in Abilities Mastered!")
	end
	call
		Lua.error("AbilitiesMastered not yet accessible for CALLING")
		//return LuaGetString("IAA","NIL.LuaSerialize(\"SubAbilitiesMastered\",SubAbilitiesMastered)")
	end
end

table LoadedItems
void CleanLoadedItems()
	LoadedItems = {}
end

// Quick IAA Use
PLUA QIU(String k)
	Lua.Scyndi.Use(k)
	r:=StripDir(k)
	return Lua.Scyndi.Class[r].IAADATA
end

quickmeta Item
	index
		string k
		k = UPPER(key)
		switch k
			case "CLEAR" "CLEAN"
				return CleanLoadedItems
			default
				LoadedItems[k] = LoadedItems[k] || QIU("Script/Data/IAA/"..k)
				if LoadedItems[k].Target=="Auto"
					LoadedItems[k].Target="1F"
					if LoadedItems[k].Heal>0
						LoadedItems[k].Target="1A"
					end
				end
				// CSayF("Requested %s\n%s",k,NIL.LuaSerialize(k,LoadedItems[k]))
				return LoadedItems[k]
		end
	end
end
