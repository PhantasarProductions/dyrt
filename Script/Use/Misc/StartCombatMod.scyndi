// License:
// 	  src/Script/Script/Use/Misc/StartCombatMod.scyndi
// 
// 	  Version: 25.04.24
// 	
// 	  Copyright (C) 2019-'20, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License


Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/Audio"
#use "libs/SCI/SString"

#use "Script/Use/Need"

//do

var CombatStartJingle

void CombatLoaded()
	assert(StateExists("FLOW_COMBAT"),"Combat session not started!")
end

string qv(v)
	switch type(v)
		case "string"
			return '"'..SafeString(v)..'"'
		case "number" "boolean"
			return tostring(v)
		case "table"
			string r = "{"
			for k2,v2 in pairs(v)
				if r!="{"
					r = r ..", "
				end
				assert(type(k2)!="table","To tables for key allowed!")
				r = r .. "["..qv(k2).."] = "..qv(v2)
			end
			return r
		case "nil"
			return "nil"
		default
			error("Cannot process type "..type(v))
	end
end

QuickMeta StartCombatFoe
	newindex
		CombatLoaded()
		//LuaDoString("FLOW_COMBAT","Combat_Start.Foe["..key.."] = "..qv(value))
		//Lua.error("Foe:StartCombatFoe definition cannot yet be done due to link up issues not yet being properly adressed!")
		Sys.Call("FLOW_COMBAT","Def_Combat_Foe",key,Value)
	end
end

QuickMeta StartCombatFoeRX
	newindex
		CombatLoaded()
		assert(type(key)=="number" and type(value)=="number","Invalid RX key/value")
		//LuaDoString("FLOW_Combat","Combat_Start.RX["..key.."] = "..qv(value))
		//Lua.error("FoeRX:StartCombatFoeRX definition cannot yet be done due to link up issues not yet being properly adressed!")
		Sys.Call("FLOW_COMBAT","Def_Combat_Start2","RX",key,Value)
	end
end

QuickMeta StartCombatFoeRY
	newindex
		CombatLoaded()
		assert(type(key)=="number" and type(value)=="number","Invalid RY key/value")
		//LuaDoString("FLOW_Combat","Combat_Start.RY["..key.."] = "..qv(value))
		//Lua.error("FoeRY:StartCombatFoeRY definition cannot yet be done due to link up issues not yet being properly adressed!")
		Sys.Call("FLOW_COMBAT","Def_Combat_Start2","RY",key,Value)
	end
end


QuickMeta StartCombat

	newindex
		CombatLoaded()
		//LuaDoString("FLOW_COMBAT","Combat_Start['"..key.."'] = "..qv(value),"COMBATSTART.NI."..key)
		Sys.Call("FLOW_COMBAT","Def_Combat_Start",key,Value)
		//Lua.error("StartCombatDefinition cannot yet be done due to link up issues not yet being properly adressed!")
	end
	
	index
		assert(type(key)=="string","String expected!")
		if key!="StartSession"
			CombatLoaded()
		end
		switch key
			case "StartSession"
				//return void()
				ddef ret
					assert(! StateExists("FLOW_COMBAT"),"There's already an open combat session!")
					CSay("Starting combat session!")
					LoadFlow("COMBAT","Script/Flow/Combat.nil")
				end
				return ret
			case "Ready"
				//return void()
				ddef ret
					CombatLoaded()
					CombatStartJingle = CombatStartJingle || Audio.Load("SFX/Combat/Start.wav","LETS_GET_READY_TO_RUMBLE")
					CombatStartJingle.Play()
					//LuaDoString("FLOW_COMBAT","LetsGetReadyToRumble()","Let's get ready to rumble!")
					Sys.Call("FLOW_COMBAT","LetsGetReadyToRumble")
				end
				return ret
			case "Foe" "Enemy"
				return StartCombatFoe
			case "RX" "rx" "Rx" "rX"
				return StartCombatFoeRX
			case "RY" "ry" "Ry" "rY"
				return StartCombatFoeRY
			default
				//return void(infinity)
				ddef ret
					//string wrk
					//wrk = "Combat_Start['"..key.."']("
					//for i,v in ipairs{infinity}
					//	if i>1
					//		wrk = wrk .. ", "
					//	end
					//	wrk = wrk .. qv(v)
					//end
					//wrk = wrk ..")"
					//LuaDoString("FLOW_COMBAT",wrk,"COMBATSTART.N."..key)
					Sys.Call("FLOW_COMBAT","Combat_Start."..key,infinity)
				end
				return ret
		end
	end
	
	//Int len()
	//	return math.random(1,1000)
	//end
	
	//String tostring()
	//	return "Begin the madness!"
	//end

end

//end // do
Init
	CSay("StartCombatMod module loaded")
End
