// License:
// 	  src/Script/Script/Use/Misc/Combat.ScyndiBundle/Combat_Foes.scyndi
// 
// 	  Version: 25.04.28
// 	
// 	  Copyright (C) 2019-'20, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License


//#use "libs/DarkText"
//#use "Script/Use/Anyway"

Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/SString"

#accept CombatTime
#accept Combat_Start
#accept Combat_Message
#accept Buffs
#accept ActPos

#use "Script/Use/Need"



class Foe extends Fighter

	// Parameters all Foe data scripts respond to
	static bool LoadOversoul
	static string LoadFoeTag
	static int LoadFoeID
	
	// SubStats
	static table StatSubs 

	// Foe specific data
	Var AI_Moves_Real
	Get Var AI_Moves
		locExtern AMR "self.AI_Moves_Real" 
		AMR = AMR || {}
		return AMR
	End
	Set Var AI_Moves
		locExtern AMR "self.AI_Moves_Real" 
		AMR = value
	End
	string AI_Module
	var AI_Data
	table Fatal
	int Experience
	var Image
	var Image_Neg
	string Description
	int FoeID
	bool AllowOversoul
	bool Boss
	bool Oversoul
	string FromFile
	int Cash
	table Drop
	table Steal
	int FlickStance = 0
	int StolenCash = 0 
	table StolenItems
	bool StolenFrom = false
	//int maxfoenum
	// link maxfoenum = Buff.maxfoenum
	
	
	get int Height
		LocExtern _self "self"
		return _self.Image.Height
	end
	get int Width
		LocExtern _self "self"
		return _self.Image.Width
	end
	
	get bool ShowHP
		locExtern this "self"
		switch __skill
			case 1
				return true
			case 2
				return Killed[this.FromFile]>0 
				// gv.Int[sprintf('Defeated_%s',self.FromFile)]>0 // Old setting!
			case 3
				return false
			default
				error("Four skills or more?")
		end
	end
	
	get bool GoOversoul
		LocExtern this "self"
		if __skill==1 or this.Oversoul
			// Make sure "Oversoul" will NEVER happen in the easy mode!
			// And an enemy who already went oversoul should not do that again, either.
			return false
		end
		CSayF("Check oversoul: File %s; Kills: %2d; Needed: %2d >> %s",this.FromFile,Killed4Oversoul[this.FromFile],(10 / (__skill-1)),tostring(Killed4Oversoul[this.FromFile]>=(10 / (__skill-1))))
		if Killed4Oversoul[this.FromFile]>=(10 / (__skill-1))			
			bool go_over = true
			CSay("= Positive! But are there not other things in order!")
			for t,v in pairs(this.Team.Foe)
				//if t!=this.Tag and v.FromFile:upper()==Upper(this.FromFile) and (not v.Oversoul)
				if t!=this.Tag
					go_over = go_over and (not (upper(v.FromFile)==upper(this.FromFile) and v.Oversoul ) ) 
					//CSayF("= Same? %s; Oversoul? %s;  Still good? %s",tostring(v.FromFile:upper()==Upper(this.FromFile)),tostring(v.Oversoul),tostring(go_over))
				end
			end			
			if go_over
				CSay("Let's go oversoul!")
				Combat_Message.Msg("Oversoul!")
				this.Compile(this.FoeID,this.FromFile,true)
				CombatTime.CalcSpeed()
				return true
			end
		end
		return false
	end
	
	
	void InitFighter()
	end
	
	string GetTeamName()
		return "Foe"
	end
	
	get string Letter
		LocExtern this "self"
		assert(this.FoeID>=0,"Negative Foe Number!")
		if this.FoeID<=26
			return lstring.char(64+this.FoeID)
		elseif this.FoeID<=701
			return lstring.char(64+math.floor(this.FoeID/26))..lstring.char(65+(this.FoeID%26))
		end
		return "?"
	end
	
	bool PosHover(int ax,int ay)
		return ax>=self.X and ay>=self.Y and ax<=self.X+self.Image.Width and ay<=self.Y+self.Image.Height
	end
	
	void Icon(int dx,int dy)
		//DarkText.Font(CombatTime.GaugeFont,self.Letter..".",dx,dy)
		CombatTime.GaugeFont.Dark(self.Letter..".",dx,dy)
	end
	
	void Draw()
		delegate overdraw
		//for _,status in self.StatusChanges.Each
		for _,status in self.StatusChanges.QEach
			if status.Draw 
				if status.OverDraw
					overdraw = status.Draw
				else
					status.Draw(self)
				end
			end
		end
		if overdraw
			overdraw(self)
		else
			if (self.FlickStance % 2 == 1)
				self.Image_Neg.Draw(self.X,self.Y)
			else
				self.Image.Draw(self.X,self.Y)
			end
		end
		__white
		if prefixed(Upper(self.FromFile),"KIDS/") and Killed["Boss/Frundarmon"]>0 
			--RPG.GetChar(self.Tag).Points("HP").Have
			Combat_Message.Msg("Frundarmon's undead kids are fading away")
		end
	end
	
	static void Compile(int num, string FoeFile,FoeOversoul)
		//var myFoe
		//var myFoeUse
		Buffs.maxfoenum = math.max(Buffs.maxfoenum,num)
		if FoeOversoul
			CSay("Due to an oversoul request let's destroy the old record!")
			RPG.KillChar(sprintf("FOE_%d",num))
		end
		Foe.LoadFoeTag = sprintf("FOE_%d",num)
		Foe.LoadOversoul = FoeOversoul==true
		Foe.LoadFoeID = num
		CSayF("Compiling foe %s: %s",Foe.LoadFoeTag,FoeFile)
		//myFoeUse = NIL.Use("Script/Data/Foes/"..FoeFile);
		//Lua.error("Combat_Foes:213 -> Foe loader not yet present")
		Lua.Scyndi.Use("Script/Data/Foes/"..FoeFile)		
		//myFoe = myFoeUse()
		myFoe := Lua.Scyndi.Class[StripDir(Replace(FoeFile,"-","_"))].retfunc()
		myFoe.FromFile = Upper(FoeFile)
		myFoe.Char = RPG.Char(Foe.LoadFoeTag)
		myFoe.Oversoul = FoeOversoul==true
		if Combat_Start.FoeIDDQD
			myFoe.Char.Points("HP").Minimum = myFoe.Char.Points("HP").Maximum
		end
		//myFoe.AI_Data = NIL.Use(sprintf("Script/Use/Specific/CombatModules/AI/%s",myFoe.AI_Module))
		Lua.Scyndi.Use(sprintf("Script/Use/Specific/CombatModules/AI/AI_%s",myFoe.AI_Module))
		myFoe.AI_Data = Lua.Scyndi.Class["AI_"..myFoe.AI_Module]
		if myFoe.AI_Data[".hasmember"]("OnCompile") 
			myFoe.AI_Data.OnCompile(myFoe)
		end
		if num<24
			myFoe.SpotX = ActPos.Spot[myFoe.Tag].x
			myFoe.SpotY = ActPos.Spot[myFoe.Tag].y
		else
			myFoe.SpotX = math.random(100,math.floor(Screen.W/2))
			myFoe.SpotY = math.random(math.floor(Screen.H/2),Screen.H-128)	
		end
	end
	
	static void TotalMassacre()
		CSay("Removing foes from memory!")
		for ch in RPG.EachChar
			if prefixed(ch,"FOE") 
				RPG.KillChar(ch)
				CSayF("Removed %s",ch)
			end
		end
		CSay("Removal complete!")
	end
	
end

// Dirty, but functional!
//Foe.StatSubs = {
//			"BASE_",          // Base stat, defined by level
//			"BUFF_",          // Stat buffs (negative numbers can be used for debuffs)
//			"END_"            // End result when all other fields have been added together
//		}
// EQUIP_ was removed as this is not applicable for foes. Same goes for permanent powerup.
Init
	Foe.StatSubs = { [0]="BASE_","BUFF_","END_" }
End
