// License:
// 	  src/Script/Script/Use/Misc/Combat.ScyndiBundle/Combat_Start_Link.scyndi
// 
// 	  Version: 25.04.12 I
// 	
// 	  Copyright (C) 2019-2020, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License

Module





// Start Modes
// 0 = Normal
// 1 = Pre-Emptive Strike
// 2 = Ambushed

#use "Script/Use/Need"

#use "libs/sci/sys"
#use "libs/sci/sstring"
#use "libs/sci/intervar"

#use "libs/music"

#use "script/use/specific/APResetMod"

#accept CombatTime
#accept Arena
#accept Hero
#accept Foe
#accept Fighter
#accept Combat_Message
#accept Stage

group Combat_Start
	table Foe
	string Arena
	string Music
	int StartMode = 0
	table RX
	table RY
	string OnyxSteal
	
	// When set the enemy cannot be defeated
	bool FoeIDDQD = false
	
	// NoLose means that the game will not perform its normal wipe-out
	// sequence when the player loses a fight!
	bool NoLose = false
end

Global Void Def_Combat_Start(string DKey,DVal)
	// Direct definition no longer possible so I have to go this way
	Combat_Start[DKey] = DVal
End

Global Void Def_Combat_Foe(int idx,String FTag)
	Combat_Start.Foe[idx] = FTag
End

global void DChat(string k)
	//static int r = 255
	//int g
	//static int b = 0
	//if b%2==0
	//	--r
	//else 
	//	r++
	//end	
	//if r>=255
	//	b++
	//	r=255
	//elseif r<=0
	//	b++
	//	r=0
	//end
	//g = 255-r
	//if b>=256
	//	b=0
	//end
	//CWriteLine(k,r,g,b)
	CSayF("COMBAT_START_LINK: DCHAT: %s",k)
end

global void DChatF(string k, infinity)
	DChat(sprintf(k,infinity))
end

global void LetsGetReadyToRumble()
	//with Combat_Start
		// Learn text
		DChatF("Loading Boxtext: New Ability")
		BoxText.Load("System/NewAbility","NEWABILITY")
	
		// Arena and Music		
		DChatF("Loading arena: %s",Combat_Start.Arena)
		Arena.Load(Combat_Start.Arena)
		if Combat_Start.Music=="*NONE*"
			DChat("No music change!")
		else
			DChatF("Pushing Music!")
			Music.Push()
			DChatF("Loading music: %s",Combat_Start.Music)
			Music.Play(Combat_Start.Music)
		end
		
		// Compile Heroes
		Hero.CompileAll()
		APReset()
		
		// Compile Foes
		for i,d in pairs(Combat_Start.Foe)
			var myFoe
			Foe.Compile(i,d)
			myFoe = Fighter.ByTag[sprintf("FOE_%d",i)]
			if Combat_Start.RX[i] and Combat_Start.RX[i]>0
				myFoe.SpotX = math.ceil(Screen.W*(Combat_Start.RX[i]/100))
			end
			if Combat_Start.RY[i] and Combat_Start.RY[i]>0
				myFoe.SpotY = math.ceil(Screen.H*(Combat_Start.RY[i]/100)) - myFoe.Height
			end
		end
		
		// Calculate gauge speed order
		CombatTime.CalcSpeed()
		for iteam,itag,ifight in Fighter.ForAll()
			switch Combat_Start.StartMode
				case 0
					ifight.GaugePosition=math.random(0,9500)
				case 1
					Combat_Message.Msg("Pre-Emptive Strike")
					switch iteam
						case "Hero"
							ifight.GaugePosition=math.random(8000,9500)
						case "Foe"
							ifight.GaugePosition=math.random(0,4000)
						default
							error("Unknown team: "..iteam)
					end
				case 2
					Combat_Message.Msg("Ambushed")
					switch iteam
						case "Hero"
							ifight.GaugePosition=math.random(0,4000)
						case "Foe"
							ifight.GaugePosition=math.random(8000,9500)
						default
							error("Unknown team: "..iteam.."!")
					end
			end
			CSayF("(StartMode %d): In team %s, member %s starts at position %d",Combat_Start.StartMode,iteam,itag,ifight.GaugePosition)
		end
		
		
		GoToFlow("Combat")
		Stage.Current = Stage.Stages.IDLE
		if Combat_Start.OnyxSteal and Combat_Start.OnyxSteal!="" and (not gv.Bool["Stolen_From_Onyx_"..Combat_Start.OnyxSteal])
			Fighter.ByTag.FOE_1.Char.Points("HP").Minimum=100
			if not Done.Tutorial_Onyx_Steal
				BoxText.Load("Combat/OnyxSteal","ONYXSTEAL")
				BoxText("ONYXSTEAL","ONYXSTEAL")
			end
		end
	//end
end
