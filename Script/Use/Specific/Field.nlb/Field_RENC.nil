// License Information:
// src/Tricky Script/Script/Use/Specific/Field.nlb/Field_RENC.nil
// Version: 21.01.12
// Copyright (C) 2019, 2020, 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information





#use "Script/Use/StartCombatMod"
#use "libs/xmath"
#use "libs/tables"
#use "libs/strings"
#use "libs/Collections"
#use "libs/datetime"

#accept FlowField
#accept FieldMap

// RENC = Random ENCounters

group RENC
	
	var Swords
	int MapTravelLevel
	int MaxEncounters
	table RoomEncounters
	int DecRate
	table RoomRate
	int MaxRate
	int RecalcMaxE
	int rgauge
	var MaxFoes
	
	int gx 
	int gy
	int gdeg
	bool ManEncOn = true
	
	bool Infinite = false

	table Foes
	table AllowLayer
	
	get int Encounters
		return self.RoomEncounters[FlowField.Map.Kthura.Layer] or 0
	end
	
	set int Encounters
		self.RoomEncounters[FlowField.Map.Kthura.Layer] = value
	end
	
	get int Rate
		return self.RoomRate[FlowField.Map.Kthura.Layer] or 0
	end
	
	set int Rate
		self.RoomRate[FlowField.Map.Kthura.Layer] = value
	end
	
	get bool AutEncOn
		return #self.Foes>0 and $AllowLayer[FieldFlow.Map.Kthura.Layer]
	end
	
	get bool ManEncOff
		return not self.ManEncOn;
	end
	
	set bool ManEncOff
		self.ManEncOn = not value;
	end
	
	//readonly delegate bcol
	
	void CONSTRUCTOR()
		self.Swords = LoadImage("gfx/RENC/Swords.png")
		self.gx = Screen.Width + 25
		self.gy = Screen.Height - 128 - 100 - 20
		self.MaxFoes = new MArray("int",3+1,4+1)
		self.MaxFoes.SetValue(1,1,1)
		self.MaxFoes.SetValue(2,1,2)
		self.MaxFoes.SetValue(3,1,2)
		self.MaxFoes.SetValue(1,2,2)
		self.MaxFoes.SetValue(2,2,3)
		self.MaxFoes.SetValue(3,2,4)
		self.MaxFoes.SetValue(1,3,3)
		self.MaxFoes.SetValue(2,3,5)
		self.MaxFoes.SetValue(3,3,7)
		//self.MaxFoes.SetValue(1,3,6)
		self.MaxFoes.SetValue(1,4,6)
		self.MaxFoes.SetValue(2,4,9)
		self.MaxFoes.SetValue(3,4,12)

	end
	
	void Recalc()
		int XEnc
		if $MapTravelLevel>__travellevel + (3-__skill)
			XEnc = ($MapTravelLevel - ( __travellevel + (3-__skill) )) * __skill
		end
		$MaxEncounters = $RecalcMaxE + XEnc
		$DecRate = 1 + XEnc
		$MaxRate = 40
	end
	
	void CompileFoeList()
		var kth
		kth = FlowField.Map.Kthura
		$Foes = {}
		for i=1,__skill
			string FoeLine
			table ListFoes			
			FoeLine = kth.Data[sprintf("Foes_Skill%d",i)]
			ListFoes = split(FoeLine,";")
			for FoeItm in each(ListFoes)
				table sFoeItm
				sFoeItm = split(FoeItm,",")
				for num = 1 , tonumber( sFoeItm[2] ) or 1
					if sFoeItm[1]=="Cyborg Healer"
						// dirty fix, but otherwise, this would gimme tons of work!
						sFoeItm[1]="Cyborg Medic"
					end
					$Foes[#self.Foes+1] = sFoeItm[1]
				end
			end
		end
	end
	
	void CompileAllowLayer()
		table ban
		ban = split(FlowField.Map.Kthura.Data.NoEncFloors,",")
		$AllowLayer = {}
		for L in FlowField.Map.Kthura.EachLayer
			$AllowLayer[L] = true
			$RoomRate[L]=$MaxRate
			$RoomEncounters[L] = $MaxEncounters
		end
		for L in each(ban)
			$RoomRate[L] = 1000
			$AllowLayer[L] = false
		end
	end
	
	void NoEncounters()
		for L in FlowField.Map.Kthura.EachLayer
			$RoomRate[L] = 0
			$AllowLayer[L] = false
			$RoomEncounters[L] = 200
			$MaxEncounters = 200
		end
	end
	
	void Reset(int MapTLevel,MaxE)
		if MapTLevel==0
			$NoEncounters()
			return
		end
		$RecalcMaxE = MaxE or 5
		$MapTravelLevel = MapTLevel
		$Recalc()
		$Encounters = $MaxEncounters
		$ManEncOn = true
		$CompileFoeList()
		$CompileAllowLayer()
		$Infinite = false
	end
	
	void RencCheck(force)
		if force and $AutEncOn
			CSay("Eric is looking for trouble!")
		elseif $Encounters<=0 or (not $AutEncOn) or ($ManEncOff)
			return
		elseif self.rgauge>0 and math.random(self.rgauge,self.rgauge*3)>__skill
			// This should prevent encounters coming to early, as I'm a bit tired of most encounters coming in the "green" zone!
			return
		end
		int ORate
		ORate = $Rate
		--$Rate		
		if $Rate<1
			$Rate=1	
		end
		//if __skill<3 and math.ceil((ORate/$MaxRate)*4)>=4 and (not force)
		if math.ceil((ORate/$MaxRate)*4)>=4 and (not force)
			// If not in hard mode, blue guarantees no encounter (skip that hard mode, it woun't happen anyway).
			return
		end
		if $Rate<=1 or math.random(1,math.min($Rate,2))<__skill or force
			var kth
			kth = FlowField.Map.Kthura
			StartCombat.StartSession()
			StartCombat.Arena = kth.Data.Arena
			if kth.Data.EncounterTune==""
				table lm
				lm = split(FlowField.Map.LoadedMap,"_")
				CSayF("Music chapter: %s",lm[1])
				switch lm[1]
					case "CH1"
						StartCombat.Music = "Music/Combat/Random/Chapter1.wav"
					case "CH2"
						StartCombat.Music = "Music/Combat/Random/Chapter2.wav"
					case "CH3"
						StartCombat.Music = "Music/Combat/Random/Chapter3.wav"
					case "CH4"
						StartCombat.Music = "Music/Combat/Random/Chapter4.wav"
					default
						StartCombat.Music = sprintf("Music/Combat/Random/Chapter%d.wav",math.random(1,4))
				end
			else
				StartCombat.Music=kth.Data.EncounterTune
			end
			int numfoe
			int numchars
			for i=1,4
				if RPG.Party[i] and RPG.Party[i]!=""
					numchars++
				end
			end
			repeat
				numfoe = math.random(1,self.MaxFoes.GetValue(__skill,numchars))
			until math.random(0,numfoe)<=__skill and math.random(0,numfoe)<=numchars and math.random(0,numfoe)<=__skill
			for i=1,numfoe
				string chosenfoe
				chosenfoe = $Foes[math.random(1,#self.Foes)]:upper()
				if prefixed(chosenfoe,"REG/") or prefixed(chosenfoe,"KIDS/") or prefixed(chosenfoe,"FAKE/")
					StartCombat.Foe[i]=chosenfoe
				else
					StartCombat.Foe[i] = "Reg/"..chosenfoe
				end
			end
			// Ambush or not?
			do
				int AmbushRollParty
				int AmbushRollMap
				AmbushRollParty = math.random(0,__travellevel)
				AmbushRollMap   = math.random(0,FieldMap.TravelLevel)
				switch __skill
					case 1
						if AmbushRollParty>=AmbushRollMap
							StartCombat.StartMode=1
						end
					case 2
						if AmbushRollParty>AmbushRollMap and math.random(0,__travellevel)>math.random(0,FieldMap.TravelLevel*2)
							StartCombat.StartMode=1
						elseif AmbushRollParty<AmbushRollMap and math.random(0,__travellevel)<math.random(0,FieldMap.TravelLevel)
							StartCombat.StartMode=2
						end
					case 3
						if AmbushRollParty<=AmbushRollMap+2
							StartCombat.StartMode=2
						end
					default
						error("Unknown skill") // Should never be possible, BUT, ya never know!
				end
			end
			$Rate = $MaxRate
			$Encounters--
			StartCombat.Ready()
		end
	end
	
	int OldSecStamp
	
	void InfRefill()
		int mc 
		mc = math.ceil(($MapTravelLevel-__travellevel)/__skill)
		if $MapTravelLevel>=__travellevel or mc==0
			// mc should never be 0 or in the check, but I've seen
			// crazier things, so I need this check to be 100% no
			// division by 0 is possible later!
			$Encounters=$MaxEncounters
			return
		end
		if $Encounters<$MaxEncounters and Now.SecStamp % mc == 0 and self.OldSecStamp!=Now.SecStamp
			$Encounters ++
			self.OldSecStamp = Now.SecStamp
		end
	end
	
	void Gauge()
		int r
		int g
		int b
		number s
		number bar
		number rgauge
		if $Infinite
			self.InfRefill()
		end
		if $AutEncOn and $gx > Screen.Width-50
			$gx--
		elseif (not $AutEncOn) and $gx < Screen.Width + 25
			$gx++
		end
		if $ManEncOff
			GraphColor.Alpha = 100
		end
		__white
		Rect($gx-1,$gy-1,12,102)
		__black
		Rect($gx,$gy,10,100)
		$gdeg++
		if $gdeg>=360
			$gdeg = $gdeg - 360
		end
		//r,g,b = $bcol($Rate)
		self.rgauge = math.ceil(($Rate/self.MaxRate)*4)
		switch self.rgauge
			case 0 1
				r,g,b = 255,0,0
			case 2
				r,g,b = 255,180,0
			case 3
				r,g,b = 0,255,0
			default
				r,g,b = 0,0,255
		end
		bar = math.floor( ($Encounters/$MaxEncounters) * 100)
		for ix=0,9
			// math.sin counts in radians, but for this particular calcuation I need degrees, and xmath.sin counts in that.
			s = math.abs(xmath.sin((ix*15)+$gdeg))
			Color(math.ceil(s*r),math.ceil(s*g),math.ceil(s*b))
			// Cheap way to draw a straight line. No need to use Bresenham here, as that would slow things down in THIS particular case.
			Rect($gx+ix,$gy+(100-bar),1,bar)
		end
		__white
		GraphColor.Alpha = 255
		$Swords.Draw($gx-11,$gy-16)
	end
	
end