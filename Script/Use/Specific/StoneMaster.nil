// License Information:
// src/Tricky Script/Script/Use/Specific/StoneMaster.nil
// Version: 20.01.13
// Copyright (C)  Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
#use "libs/LinkedList"

class SMUpdate
	
	link CharTag = Flow_FieldMenu.CharTag
	
	
	string chTag
	string NameUpdate
	int skill
	string Element
	string StatusChange
	
	set string UpdateName
		self.NameUpdate = value
	end
	
	get string UpdateName
		return self.NameUpdate
	end
	
		
	get int RequireStones
		var ch
		int ret
		ch = RPG.GetChar(self.chTag)
		if self.skill>=0
			ret = ret + ch.Points(sprintf("SKILLLVL%d",self.skill)).Have+1
			//CSay("Calc from skill "..self.skill.." => "..ret)
		end
		if self.Element!=""
			ret = ret + math.abs(ch.Stat("BASE__RESIST_Elem_"..self.Element).Value + ch.Stat("PERMPOWERUP__RESIST_Elem_"..self.Element).Value + 1)
		end
		if self.StatusChange!=""
			ret = ret + math.abs(ch.Stat("BASE__RESIST_Stat_"..self.StatusChange).Value + ch.Stat("PERMPOWERUP__RESIST_STat_"..self.self.StatusChange).Value+1)
		end
		//CSay(tostring(ret))
		switch __skill
			case 1
				ret = ret * 0.65
			case 2
				ret = ret * 0.99
			case 3
				ret = ret * 2.45
			end
		//CSay("Mul: "..tostring(ret))
		ret = math.ceil(ret) + __skill
		//CSay("Result: "..ret)
		return ret
	end
	
	void CONSTRUCTOR(string ch)
		self.skill = -1
		self.chTag = ch
		//self.MyList.AddLast(self)
	end
end

class CStoneMaster
	link CharTag = Flow_FieldMenu.CharTag
	var MyList
	static table MyMasters
	
	void CONSTRUCTOR()
		self.MyList = new TLinkedList
	end
	
	void NewSkill(string ch,int sk,string skillname)
		var NU
		NU = new SMUpdate(ch)
		NU.skill = sk
		NU.NameUpdate = skillname
		self.MyList.AddLast(NU)
	end
	
	void NewElement(string ch,string elem)
		var NU
		NU = new SMUpdate(ch)
		NU.Element = elem
		NU.NameUpdate = sprintf("%s elemental resistance",elem)
		self.MyList.AddLast(NU)
	end
	
	void NewStatus(string ch,string status)
		var NU
		NU = new SMUpdate(ch)
		NU.StatusChange = status
		NU.NameUpdate = sprintf("%s status resistance",status)
		self.MyList.AddLast(NU)
	end
	
	get delegate Each
		table lst
		int i
		for SMU in self.MyList.Each
			if SMU.chTag == self.CharTag
				lst[#lst+1]=SMU
			end
		end
		return var()
			i++
			if i>#lst
				return nil;
			else
				return lst[i]
			end
		end
	end
	
end

module MStoneMaster
	
	// osm = old stone master; csm = current stone master
	// string osm
	string csm
	var FBig
	var FTxt
	var Hover
	
	link CharTag = Flow_FieldMenu.CharTag
	
	get var CUpdates
		CStoneMaster.MyMasters[self.csm] = CStoneMaster.MyMasters[self.csm] or NIL.Use("Script/Data/StoneMaster/"..self.csm)
		return CStoneMaster.MyMasters[self.csm]
	end
	
	void Act()
		if not self.Hover
			Annoy("Huh? How could the act function activate without hover information?\n\nA bug or is this game hacked?")
			// Normally this should NEVER be possible, but if it happens, at least the game won't crash now!
		elseif self.Hover.RequireStones>__magicstones
			Annoy("Not enough magic stones for that update!")
			// Normally also never possible, but if it happens, the game will not result into negative magic stones and allow you to cheat!
		else
			if Yes(sprintf("You cannot undo this update!\n\nAre you sure you want to make this upgrade for %s?\n\n%s",RPG.GetChar(self.CharTag).Name,self.Hover.UpdateName))
				#- __magicstones self.Hover.RequireStones
				if self.Hover.skill>=0
					delegate su
					su = NIL.Use("Script/Char/SkillUp/"..self.CharTag)
					RPG.GetChar(self.CharTag).Points(sprintf("SKILLLVL%d",self.Hover.skill)).Have++
					RPG.GetChar(self.CharTag).Points(sprintf("SKILLEXP%d",self.Hover.skill)).Have=0
					su(self.Hover.skill)
				elseif self.Hover.Element!=""
					error("Elemental update not yet put in!")
				elseif self.Hover.StatusChange!=""
					error("Status Change update not yet put in!")
				else
					error("WTF? No update data!")
				end
			end
		end
	end
	
	void Panel(ubox)
		int y
		__amber
		self.FBig.DrawText(self.csm,ubox.x+20,ubox.y+20)
		y = ubox.y+80
		self.Hover = nil;
		for upd in self.CUpdates.Each
			int indx
			__white
			if Mouse.X>ubox.x and Mouse.Y>y and Mouse.X<ubox.x+ubox.w and Mouse.Y<y+25
				Color(125,180,255)
				if upd.RequireStones>__magicstones
					Color(255,0,0)
				else
					self.Hover = upd
					Flow_FieldMenu.LM_Action=self.Act
				end
				indx = 5
			end
			self.FTxt.DrawText(upd.UpdateName,ubox.x+10+indx,y)
			self.FTxt.DrawText(sprintf("need %4d stones",upd.RequireStones),(ubox.w+ubox.x)-20,y,1)
			#+ y 25
		end
		__white
		self.FTxt.DrawText(sprintf("Magic Stones: %4d",__magicstones),ubox.x+5,(ubox.y+ubox.h)-30)
	end
	
	void CONSTRUCTOR()
		self.FBig = GetFont("BIGTEXT")
		self.FTxt = GetFont("BOXTEXT")
	end
	
end
