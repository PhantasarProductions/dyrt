// License Information:
// src/Tricky Script/Script/Use/Specific/Combat.nlb/Combat_Buff.nil
// Version: 20.07.03
// Copyright (C) 2020 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
group Buffs
	var Fighter

	get int SetEnemyInterval
		switch __skill
			case 1
				return 10
			case 2
				return 20
			case 3
				return 100
			default
				error("Buffs.EnemyInterval: Invalid skill!")
		end
	end

	get int SetHeroInterval
		switch __skill
			case 1
				return 250
			case 2
				return 20
			case 3
				return 8
			default
				error("Buffs.EnemyInterval: Invalid skill!")
		end
	end

	readonly int EnemyInterval
	readonly int HeroInterval
	int EnemyLast
	int HeroLast
	int Timer
	int maxfoenum
	
	void CONSTRUCTOR()
		self.EnemyInterval = self.SetEnemyInterval
		self.HeroInterval = self.SetHeroInterval
	end

	void BuffCheck()
		self.Timer++
		// Decrease player buff and enemy debuff
		if self.HeroLast!=self.Timer and (self.Timer % self.HeroInterval==0)
			self.HeroLast = self.Timer
			// Heroes Buff Decrease
			for i=1,8
				var chtag
				chtag = RPG.Party[i] or ""
				if chtag!=""
					var ch
					var f
					var stl
					f = self.Fighter.ByTag[chtag]
					// assert(f,"Character doesn't exist `"..chtag.."`!! #"..i..tostring(RPG.Party[i]))
					ch = RPG.GetChar(chtag)
					stl = ch.ListStats
					for _,st in ipairs(stl)
						int pr = 0
						if i<=4
							pr = f.Permanenced[st] or 0
						end
						if prefixed(st,"BUFF_") and (ch.Stat(st).Value>pr)
							--ch.Stat(st).Value
						end
					end
				end
			end
			for i=1,self.maxfoenum
				if self.Fighter.ByTag["FOE_"..i]
					string chtag
					var ch
					var f
					var stl
					chtag = "FOE_"..i
					f = self.Fighter.ByTag[chtag]
					if f
						ch = RPG.GetChar(chtag)
						if ch.Points("HP").Have>0
							stl = ch.ListStats
							for _,st in ipairs(stl)
								if prefixed(st,"BUFF_") and ch.Stat(st).Value<0
									++ch.Stat(st).Value
								end
							end
						end
					end
				end
			end
		end
		// Decrease player debuff and enemy boff
		if self.EnemyLast!=self.Timer and (self.Timer % self.EnemyInterval==0)
			self.EnemyLast=self.Timer
			// Heroes Buff Decrease
			for i=1,8
				var chtag
				chtag = RPG.Party[i] or ""
				if chtag!=""
					var ch
					var f
					var stl
					f = self.Fighter.ByTag[chtag]
					ch = RPG.GetChar(chtag)
					stl = ch.ListStats
					for _,st in ipairs(stl)
						if prefixed(st,"BUFF_") and ch.Stat(st).Value<0
							f.Permanenced[st]=0
							++ch.Stat(st).Value
						end
					end
				end
			end
			for i=1,self.maxfoenum
				if self.Fighter.ByTag["FOE_"..i]
					string chtag
					var ch
					var f
					var stl
					chtag = "FOE_"..i
					f = self.Fighter.ByTag[chtag]
					if f
						ch = RPG.GetChar(chtag)
						if ch.Points("HP").Have>0
							stl = ch.ListStats
							for _,st in ipairs(stl)
								if prefixed(st,"BUFF_") and ch.Stat(st).Value<(f.Permanenced[st] or 0)
									--ch.Stat(st).Value
								end
							end
						end
					end
				end
			end
		end
	end
	
	void Buff(f, string stat, int b)
		if b<0
			f.Permanenced[stat] = 0
			f.Ch.Stat("BUFF_"..stat).Value = math.min(f.Ch.Stat("BUFF_"..stat).Value,b)
			#pure
			Hurt(stat.." down "..math.abs(b),f.Tag,255,0,0)
			#endpure
		elseif b>0
			f.Ch.Stat("BUFF_"..stat).Value = math.max(f.Ch.Stat("BUFF_"..stat).Value,b)
			#pure
			Hurt(stat.." up "..math.abs(b),f.Tag,180,255,0)
			#endpure
		end
	end
	
	void BuffProcent(f, string stat,int b)
		number fl
		fl = b/100
		self.Buff(f,stat,math.ceil(fl*f.Ch.Stat("BASE_"..stat).Value))
	end
end