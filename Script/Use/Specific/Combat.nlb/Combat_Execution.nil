// License Information:
// src/Tricky Script/Script/Use/Specific/Combat.nlb/Combat_Execution.nil
// Version: 19.10.30
// Copyright (C)  Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "libs/tables"
#use "libs/strings"
#use "Script/Use/Specific/Combat.nlb/Combat_Hurt.nil"

group Execution

	bool Helpless(Target)
		// TODO: Render helpless if status changes ask for that!
		return false
	end

	void Attack(Exe,Tar,Act)
	
		// declarations
		delegate rand
		int base
		int adie
		int defbb
		int ddie
		int totaldmg
		int dmg
		int enddmg
		bool fatal
		number elmod
		
		var TarChar
		TarChar = RPG.Char(Tar.Tag)
		
		// Calculate damage
		rand = math.random
		base = math.ceil(RPG.Char(Exe.Tag).Stat(sprintf("END_%s",Act.AttackStat).Value)*(Act.Attack/100))
		// local base = Combat_Stat(TGROUP,TACTOR,abl.AttackStat); CSay("AttackStat = "..abl.AttackStat); CSay("base = "..base)
		// if abl.UseModifier then base = round(base * (abl.Modifier/100)) end
		adie = rand(1,base/2)
		defb = RPG.Char(Tar.Tag).Stat(sprintf("END_%s",Act.DefenseStat).Value) //Combat_Stat(TACT["TargetGroup"],target,abl.DefenseStat)
		ddie = rand(1,defb/5)
		totaldmg = base + adie
		totaldef = defb + ddie
		dmg = round(totaldmg-totaldef); if dmg<1 then dmg=1 end
		
		// Modify by attack type
		fatal = prefixed(Tar.Tag,"FOE_") and Tar.Fatal[Act.AttackType]
		enddmg = dmg - (math.floor(dmg * (TarChar.Stat(sprintf("END_RESIST_Elem_%s",Act.AttackType)).Value/100)))
		
		// Modify by element type
		fatal = fatal or ( prefixed(Tar.Tag,"FOE_") and Tar.Fatal[Act.Element] )
		elmod = TarChar.Stat(sprintf("END_RESIST_Elem_%s",Act.Element)).Value
		enddmg = dmg - (math.floor(dmg * (elmod/100)))
		
		// Show what damage done
		if fatal
			enddmg = TarChar.Points("HP").Have
			new Hurt("Death",255,0,0)
		elseif enddmg<0
			new Hurt(enddmg,0,255,0)
		elseif elmod<0
			new Hurt(enddmg,255,0,0)
		elseif elmod=100
			enddmg = 0
			new Hurt("Immune",255,180,0)
		elseif elmod>0
			new Hurt(enddmg,255,180,0)
		else
			new Hurt(enddmg)
		end
		
		TarChar.Points("HP").Have.Dec(enddmg)
	end

	void TrueExec(Action,Target)
		// Before we begin
		bool hit
		var Executor
		string TarTag
		string ExeTag
		TarTag=Target.Tag
		ExeTag=Executor.Tag
		Executor = Action.Executor
		assert(Action,"Execution.TrueExec(): I need action and a target!")
		// Accuracy Check
		if AccuracyCheck and (not self.Helpless(Target))
			int acc
			int eva
			acc = math.random(1,RPG.Char(ExeTag).Stat("END_Accuracy"))
			eva - math.random(1,RPG.Char(TarTag).Stat("END_Evasion")/5)
			if eva>acc
				new Hurt("Miss",Target.Tag,127,127,127)
				return
			end			
		end
		
		// Cure status changes (must after accuracy check be first always).
		
		// Calculate attack and damage
		if Action.Attack>0
			Attack(Executor,Target,Action)
			hit = true
		end
		
		// Calculate healing
		
		// Buffs/Debufss
		
		// Cause status changes (must always be the last before the hit check)
		
		// If not hit, make note of a miss
		if not hit
			new Hurt("Miss",Target.Tag,127,127,127)
		end
		
	end

	void Exec(Action)
		assert(Action,"Execution.Exec(nil): I need action!")
		for tar in each(Action.Targets)
			self.TrueExec(Action,tar)
		end
	end

end


