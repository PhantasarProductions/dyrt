// License Information:
// src/Tricky Script/Script/Use/Specific/Combat.nlb/Combat_Action.nil
// Version: 19.10.22
// Copyright (C)  Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "libs/tables"
#use "libs/strings"

#accept Fighter
#accept Combat_Message
#accept Stage_Action

// This may look a bit odd, but it prevents errors
// I really need a kind of forwarding thing in here, I suppose
#use "Script/Use/Specific/Combat.nlb/Combat_Arena.nil" 
#use "Script/Use/Specific/Combat.nlb/Combat_CallBack.nil" 

class Actions

	// Executor
	string ExeNameTeam
	string ExeTag
	var Executor
	bool ExeAnim
	
	// Action itself
	string ActTag
	var Act
	
	// Targets
	table TargetTags
	table Targets
	
	void CONSTRUCTOR(table data)
		// DIRTY CODE STRAIGHT FROM HELL, but hey, due to the way NIL
		// works out classes, this works very fine....
		for key,value in pairs(data)
			self[key] = value
		end
		
		// Krekwakwou?
		void Want(string field)
			assert(data[field]!=nil and data[field]!="",sprintf("There was no data for Actions field '%s'",field))
		end
		Want("ExeTag")
		Want("ActTag")
		assert( 
			(data.TargetTags or data.Targets) and 
			(not (data.TargetTags and data.Targets) ),
			"Invalid input for action targets")
		
		// Configure targets
		if not data.Targets
			for tar in each(data.TargetTags)
				self.Targets[#self.Targets+1] = Fighter.ByTag[tar]
			end
		end
	end
	
end

group Action_PreMove
	void Draw()
	end
	
	void Update()
	end
end

group Action_Announce
	
	int CountDown = 6
	
	void Draw()
	end
	
	void Update()
		self.CountDown--
		if self.CountDown<=0
			self.CountDown=6
			Stage_Action.Stage=Action_PreMove
		end
	end
end

group Stage_Action extends Stage

	var Action
	var Stage
	var Act
		
	void ComeToMe(Act)
		var Icon
		self.Act = Act
		assert(Act,"No action!")
		self.Action = Action_Announce
		Stage.Go("ACTION")
		self.Action=Action_Announce
		if not prefixed(Act.ExeTag,"FOE_")
			Icon = Act.ExeTag
		end
		Combat_Message.Msg(Act.Act.Name,Icon)
	end

	void Draw()
		self.Stage.Draw()
	end
	
	void Update()
		self.Stage.Update()
	end

	void CONSTRUCTOR()
		Stage.Stages.ACTION = self
	end

end




