// License Information:
// src/Tricky Script/Script/Use/Specific/Combat.nlb/Combat_Action.nil
// Version: 20.04.23
// Copyright (C)  Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "libs/tables"
#use "libs/strings"

#accept Fighter
#accept Combat_Message
#accept Stage_Action
#accept Execution

// This may look a bit odd, but it prevents errors
// I really need a kind of forwarding thing in here, I suppose
#use "Script/Use/Specific/Combat.nlb/Combat_Arena.nil" 
#use "Script/Use/Specific/Combat.nlb/Combat_CallBack.nil" 

class Actions

	// Executor
	string ExeNameTeam
	string ExeTag
	var Executor
	bool ExeAnim
	
	// Action itself
	string ActTag
	var Act
	
	// Extra data
	string RemoveItem
	int RemoveAP
	bool BlockIfSilenced
	bool AllowLearning
	string LearnTag
	bool Learned
	
	// Targets
	table TargetTags
	table Targets
	
	void CONSTRUCTOR(table data)
		// DIRTY CODE STRAIGHT FROM HELL, but hey, due to the way NIL
		// works out classes, this works very fine....
		for key,value in pairs(data)
			self[key] = value
		end
		
		// Krekwakwou?
		void Want(string field)
			assert(data[field]!=nil and data[field]!="",sprintf("There was no data for Actions field '%s'",field))
		end
		Want("ExeTag")
		Want("ActTag")
		assert( 
			(data.TargetTags or data.Targets) and 
			(not (data.TargetTags and data.Targets) ),
			"Invalid input for action targets")
		self.Act=Item[data.ActTag]
		// Configure targets
		if not data.Targets
			for tar in each(data.TargetTags)
				self.Targets[#self.Targets+1] = Fighter.ByTag[tar]
			end
		end
		// Executor
		self.Executor = Fighter.ByTag[data.ExeTag]
		// Act
		self.Act = Item[data.ActTag]
		
		// Debug
		//CSayF("ACTION Created:\n%s",self[".dump"])
	end
	
end

group Action_Exe
	void Draw()
	end
	
	void Update()
		bool ok = true
		var F
		F = Stage_Action.Act.Executor
		if Stage_Action.Act.RemoveItem and Stage_Action.Act.RemoveItem!="" 
			if Inventory[ Stage_Action.Act.RemoveItem ] > 0
				Inventory[ Stage_Action.Act.RemoveItem ]--
			else
				ok = false
				Combat_Message.Msg("Out of items!")
			end
		end
		// if Stage_Action.Act.RemoveAP and Stage_Action.Act.RemoveAP!=""
		if Stage_Action.Act.RemoveAP and Stage_Action.Act.RemoveAP>0
			var Ch 
			var AP 
			CSayF("Remove AP: %s; Tag: %s",tostring(Stage_Action.Act.RemoveAP),tostring(F.Tag))
			Ch = RPG.GetChar(F.Tag)
			AP = Ch.Points("AP")
			if AP.Have<Stage_Action.Act.RemoveAP
				Combat_Message.Msg("Out of AP!")
				ok=false
			else
				AP.Inc(0-Stage_Action.Act.RemoveAP)
			end
		end
		if ok
			Execution.Exec(Stage_Action.Act)
		end
		F.GaugePosition = 0
		if not prefixed(F.Tag,"FOE_")
			F.Frame = 0
			F.Houding = "IDLE"
		end
		F.NextAct = nil
		Stage.Go("IDLE")
		for i=5,8
			string bck
			bck = RPG.Party[i]
			if bck and bck!=""
				RPG.GetChar(bck).Points("AP").Have++
			end
		end
	end
end

group Action_SpellAni
	
	var sa_mod
	
	void Draw()
		// TODO: Execute NIL script if applicable
		// TODO: Execute SASKIA script if applicable
		if (not self.sa_mod) or (self.sa_mod.Cycle(Stage_Action.Act))
			Stage_Action.Stage = Action_Exe
		end
	end
	
	void Update()
		// TODO: Check if no more spellani scripts are running, either SASKIA or NIL
		
	end
	
end

group Action_PreMove

	int Jump = 0
	bool Jumping = false
	int skiptimer = 16

	get var Action
		return Stage_Action
	end
	
	get var Act
		return self.Action.Act
	end

	void Draw()
		
	end
	
	void Update()
		if $skiptimer>0
			$skiptimer--
			return
		end
		$skiptimer=16
		if prefixed(self.Act.ExeTag,"FOE_")
			self.Act.Executor.FlickStance++
			if self.Act.Executor.FlickStance>5
				self.Act.Executor.FlickStance = 0
				Action_SpellAni.sa_mod = nil;
				if self.Act.Act.SpellAniScript and self.Act.Act.SpellAniScript!=""
					CSayF("Loading Spellani: %s ",self.Act.Act.SpellAniScript)
					Action_SpellAni.sa_mod = NIL.Use("Script/Use/Specific/CombatModules/SpellAni/"..self.Act.Act.SpellAniScript)
					Action_SpellAni.sa_mod.Init(self.Act)
				else
					CSay("No spellani, so let's not go for that!")
				end
				Stage_Action.Stage = Action_SpellAni
			end
		else			
			self.Act.Executor.Houding = self.Act.Act.Stance
			self.Act.Executor.AutoLoadPic()
			self.Act.Executor.Frame++
			if self.Act.Executor.Frame>=self.Act.Executor.Pics[self.Act.Executor.Houding].Frames
				self.Act.Executor.Frame=self.Act.Executor.Pics[self.Act.Executor.Houding].Frames-1
				Action_SpellAni.sa_mod = nil;
				if self.Act.Act.SpellAniScript and self.Act.Act.SpellAniScript!=""
					CSayF("Loading Spellani: %s ",self.Act.Act.SpellAniScript)
					Action_SpellAni.sa_mod = NIL.Use("Script/Use/Specific/CombatModules/SpellAni/"..self.Act.Act.SpellAniScript)
					Action_SpellAni.sa_mod.Init(self.Act)
				else
					CSay("No spellani, so let's not go for that!")
				end
				Stage_Action.Stage = Action_SpellAni
			end
		end
	end
end

group Action_Announce
	
	int CountDown = 6
	
	void Draw()
	end
	
	void Update()
		self.CountDown--
		if self.CountDown<=0
			self.CountDown=6
			Stage_Action.Stage=Action_PreMove
			Action_PreMove.Jump = 0
		end
	end
end

group Stage_Action extends Stage

	var Action
	var Stage
	var Act
		
	void ComeToMe(Act)
		var Icon
		self.Act = Act
		assert(Act,"No action!")
		self.Action = Action_Announce
		Stage.Go("ACTION")
		self.Action=Action_Announce
		if not prefixed(Act.ExeTag,"FOE_")
			Icon = Act.ExeTag
		end
		if (Act.Learned)
			BoxText("NEWABILITY",Act.ExeTag:upper().."1")
		end
		Combat_Message.Msg(Act.Act.Name,Icon)
		self.Stage = Action_Announce
	end

	void Draw()
		self.Stage.Draw()
	end
	
	void Update()
		self.Stage.Update()
	end

	void CONSTRUCTOR()
		Stage.Stages.ACTION = self
	end

end