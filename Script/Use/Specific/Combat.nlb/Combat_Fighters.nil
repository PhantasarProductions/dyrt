// License Information:
// src/Tricky Script/Script/Use/Specific/Combat.nlb/Combat_Fighters.nil
// Version: 20.07.13
// Copyright (C) 2019, 2020 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "libs/tables"


class Fighter
	table Permanenced
	table Instant
	int SpotX
	int SpotY
	int TempX
	int TempY
	bool UseTemp = false
	int SpeedBonus = 0
	
	var Char
	int GaugePosition
	int NextActSpeed
	var NextAct
	
	table StatusChangesRealTable
	table StatusChanges
	
	get string Name
		return self.Char.Name
	end
	
	set string Name
		self.Char.Name=value
	end
	
	get var Ch
		return RPG.GetChar(self.Tag)
	end
	
	get int X
		if self.UseTemp
			return self.TempX
		end
		return self.SpotX
	end
	
	get int Y
		if self.UseTemp
			return self.TempY
		end
		return self.SpotY
	end
	
	get int Agility
		return self.Char.Stat("END_Agility").Value
	end
	
	static table Team
	static table ByTag
	
	bool StatusAltAI(string AltAI)
		// TODO: The real code please!
		return false
	end
	
	abstract void Draw()
	abstract string GetTeamName()
	abstract void Init()
	abstract bool PosHover(int x,int y)
	abstract void Icon(int dx,int dy)
	readonly string Tag
	final get string TeamName
		return self.GetTeamName()
	end
	
	static delegate ForAll()
		int iteridx = 0
		table iter
		for TeamTag,TeamTable in spairs(self.Team)
			for MemTag,MemData in spairs(TeamTable)
				// No data! Very important as the Lua garbage collector
				// Has a bug when multi-references through tables are there
				iter[#iter+1] = { ['Team'] = TeamTag, ['Member'] = MemTag } 
			end
		end
		#pure
		return function()
		#endpure
			iteridx++
			#pure
			if iter[iteridx] then
				return iter[iteridx].Team,iter[iteridx].Member,self.Team[iter[iteridx].Team][iter[iteridx].Member]
			else
				return nil,nil,nil;
			end
		end
		#endpure
	end
	
	static delegate ForAllQuick()
		int team = 1
		int heronum
		int foenum
		#pure
		return function()
		#endpure
			repeat
				switch team
					case 1
						string h
						heronum++						
						h = RPG.Party[heronum] or ""
						if heronum>4 or RPG.Party[heronum]==""
							team = 2
						else
							return "Hero",h,Fighter.ByTag[h]
						end
					case 2
						string h						
						foenum++
						h = "FOE_"..foenum
						if not Fighter.ByTag[h]
							return nil,nil,nil;
						end
						return "Foe",h,Fighter.ByTag[h]
					default
						error("WTF!!!!! Invalid team number!")
				end
			forever
		#pure
		end
		#endpure
	end
	
	void PreInput()
		for k,s in self.StatusChanges.Each
			if s.PreInput
				s.PreInput(self)
			end
		end
	end
	
	var HP

	final void CONSTRUCTOR(string aTag)
		self.ByTag = Fighter.ByTag // static variables do not seem to transfer so well... I must fix that!
		self.Tag=aTag
		self.Team = Fighter.Team // As a result of a bug with statics in extendable classes, this will have to make sure the right class is always there!
		self.Team[self.TeamName] = self.Team[self.TeamName] or {}
		self.Team[self.TeamName][aTag] = self
		CSay("= Added to team: "..self.TeamName.."/"..tostring(self.Team))
		self.ByTag[aTag]=self
		
		bool stat_modified = true
		bool alive
		table qstats
		
		
		self.StatusChanges = setmetatable({},{
			["__index"] = var(s,string k)
				string ku
				self.HP = self.HP or self.Char.Points("HP")
				
				if self.HP.Have==0 and alive
					stat_modified = true
					alive = false
				elseif self.HP.Have!=0 and (not alive)
					stat_modified = true
					alive = true
				end
				// CSayF("%s (Alive Check) %04d . Alive=%s Modified=%s",self.Tag,self.HP.Have,tostring(alive),tostring(stat_modified))
				ku = k:upper()
				switch ku
					case "DEATH" "FALLEN"
						if self.Char.Points("HP").Have==0
							return CStatus.Death
						else
							return nil;
						end
					case "OVERSOUL"
						if prefixed(self.Tag,"FOE_") and self.Oversoul
							return CStatus.Oversoul
						end
					case "GENEACH"
						int i=0
						return var()
							string k
							string uk
							var v
							repeat
								i++
								if i>#Combat_Status.SN
									return nil,nil;
								end								
								k = Combat_Status.SN[i]
								uk = k:upper()
								v = self.StatusChanges[uk]
								if v and self.HP.Have==0 and uk!="DEATH" and uk!="FALLEN" and uk!="OVERSOUL" 
									self.StatusChanges[uk] = false;
									v=nil;
									CSay(self.Tag..": Nullfied status "..k.."! Out of HP!")
								end
								if v
									return k,v,i
								end
							forever
						end
					case "QEACH" "EACH"
						if stat_modified
							CSay("Modified, so regenerating QEACH table: "..self.Tag)
							qstats = {}
							stat_modified = false
							for k,v,i in self.StatusChanges.GenEach
								CSayF("QEACH Generation:%03d.%03d: %s",#qstats+1,i,k)
								qstats[#qstats+1]={['k']=k,['v']=v}
							end
						end
						int idx = 0
						return var()
							idx++
							if idx>#qstats
								return nil,nil,nil;
							end
							return qstats[idx].k,qstats[idx].v
						end
					default
						if self.HP.Have==0
							self.StatusChangesRealTable[ku]=nil;
						end
						return self.StatusChangesRealTable[ku]
				end
			end,
			["__newindex"] = void(s,string k,v)
				stat_modified = true
				CSay("Modified: "..self.Tag)
				k = k:upper()
				assert(k!="EACH","Cannot use EACH when defining")
				switch k
					case "DEATH" "FALLEN"
						if v and self.Char.Points("HP").Have>0
							self.Char.Points("HP").Have = 0
							new Hurt("Death",self.Tag,255,0,0)
						elseif (not v) and (self.StatusChanges.UNDEAD or self.StatusChanges.ZOMBIE)
							self.Char.Points("HP").Have = 0
							new Hurt("Destroyed",self.Tag,255,0,0)
						elseif self.Char.Points("HP").Have == 0 and (not v) and (not prefixed(self.Tag,"FOE_"))
							self.Char.Points("HP").Have = 1
							new Hurt("Revive",self.Tag,255,0,0)
						end
					case "OVERSOUL"
						error("Oversoul is a read-only automated setting in status changes table")
					default
						if v
							assert(CStatus[k],"No status labelled: "..k)
							self.StatusChangesRealTable[k] = CStatus[k]
							// new Hurt(k,self.Tag,255,100,100)
							CSayF("Status %s attached to character: %s",k,self.Tag)
						else
							if self.StatusChangesRealTable[k]
								new Hurt("Cure: "..k,self.Tag,180,255,000)
							end
							CSayF("Status %s removed to character: %s",k,self.Tag)
							self.StatusChangesRealTable[k] = nil;
						end
				end
			end,
			["__tostring"] = string(s)
				string ret
				for k,_ in s.Each
					if ret!=""
						ret = ret .. "; "
					end
					ret = ret .. k
				end
				return ret
			end
		})
		self.Init()
	end
	
end


// Is is to tackle a few forwarding issues NIL suffers from
global var fw_Fighter
#pure
fw_Fighter = Fighter
#endpure

#pure
Defeated.F = Fighter
#endpure

#pure 
Buffs.Fighter = Fighter
#endpure