// License Information:
// **********************************************
// 
// src/Tricky Script/Script/Char/PersonalAction/Merya.nil
// (c) Jeroen Broks, 2019, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 20.04.28
// End License Information

#say "Let's load Merya's personal action!"

#use "libs/linkedlist"
#use "libs/xmath"
#use "libs/strings"

#say "Merya Scan class!"
class MeryaScan

	static var Lijst
	
	static void Detect()
		for punt,schakel in self.Lijst.Each
			schakel.UnLink()
		end
		for Tag in FieldFlow.Map.Kthura.EachTag(Map.Layer)
			if prefixed(Tag,"MeryaScan_")
				new MeryaScan(Tag)
			end
		end
	end
	
	static void ShowAll()
		for punt,schakel in self.Lijst.Each
			punt.Show(schakel)
		end
	end
	
	int CD
	int trueX
	int trueY
	string Layer
	
	get int X
		return self.trueX - FieldFlow.Map.ScrollX
	end
	get int Y 
		return self.trueY - FieldFlow.Map.ScrollY
	end
	
	get int Radius
		return self.CD % 64
	end
	
	void CONSTRUCTOR(string tag)
		number afstand
		Map.Obj=tag
		self.trueX = Map.ObjInt.X
		self.trueY = Map.ObjInt.Y
		afstand = xmath.Pythagoras(self.trueX,self.trueY,Map.PlayerX,Map.PlayerY)
		self.CD = math.ceil(320 - afstand)
		if self.CD<8 
			self.CD=8
		end
		self.Layer = Map.Layer
		self.Lijst.AddLast(self)
	end
	
	void Show(schakel)
		Color(180,180,0)
		DrawCircle(self.X,self.Y,self.Radius)
		if schakel
			--self.CD
			if self.CD<0 or self.Layer!=Map.Layer
				schakel.UnLink()
			end
		end
	end
end

#say "Merya Personal Action Module!"
module Merya_Personal_Action
	var Img
	int X
	int Y
	int Stage = 0
	int Radius = 0 
	get int W
		return self.Img.Width
	end
	get int H
		return self.Img.Height
	end
	
	get int MeryaX
		return FieldFlow.Map.Kthura.Actor.Player.X - FieldFlow.Map.ScrollX
	end
	
	get int MeryaY
		return FieldFlow.Map.Kthura.Actor.Player.Y - FieldFlow.Map.ScrollY
	end
	
	void RadarCircle()
		Color(180,0,255)
		DrawCircle(self.MeryaX,self.MeryaY,self.Radius)
		self.Radius++
		if self.Radius>150 and self.Stage==1
			self.Stage=2
			MeryaScan.Detect()
		elseif self.Radius>300
			self.Stage=3
		end
		__white
	end
	
	void Draw()
		self.Img.Draw(self.X,self.Y)
		switch self.Stage
			case 1 
				self.RadarCircle()
			case 2
				self.RadarCircle()
				MeryaScan.ShowAll()
			case 3
				MeryaScan.ShowAll()			
		end
	end
	
	bool Click(int but,int x, int y)
		if Mouse.X>self.X and Mouse.Y>self.Y and Mouse.X<self.X+self.W and Mouse.Y<self.Y+self.Y
			self.Stage = 1
			self.Radius = 0
			return true
		end
		return false		
	end
	
	void CONSTRUCTOR()
		CSay("Loading Merya's button!")
		self.Img = LoadImage("GFX/PersAction/Merya.png")
		self.X = Screen.Width -300
		self.Y = Screen.Height-400
		CSay("Starting up a linked list for found pivots!")
		MeryaScan.Lijst = new TLinkedList
	end

#say "End of Merya's personal action module! Let's compile and continue!"
end