// License Information:
// **********************************************
// 
// src/Tricky Script/Script/Char/PersonalAction/Scyndi.nil
// (c) Jeroen Broks, 2019, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 20.04.28
// End License Information

#use "libs/strings"

module Scyndi_Personal_Action

	var Img
	int X
	int Y
	bool HookMove
	int HookMoveX
	int HookMoveY
	
	void Draw()
		self.Img.Draw(self.X,self.Y)
		Color(255,180,0)
		if self.HookMove
			int px
			int py
			int hx
			int hy
			px = (__player.X - FlowField.Map.ScrollX) // + 16
			py = (__player.Y - FlowField.Map.ScrollY) - 32
			hx = self.HookMoveX - FlowField.Map.ScrollX //+ 16
			hy = self.HookMoveY - FlowField.Map.ScrollY //- 16
			DrawLine(px,py,hx,hy)
			if not __player.Moving
				self.HookMove=false
			end
//			if (self.HookMoveX!=__player.X and self.HookMoveY!=__player.Y) or math.abs(self.HookMoveX-__player.X)<70 or math.abs(self.HookMoveY-__player.Y)<70 
//				self.HookMove = false
//			elseif self.HookMoveX<__player.X
//				Rect(self.HookMoveX,self.HookMoveY,self.HookMoveX-__player.X,1)
//			elseif self.HookMoveX>__player.X
//				Rect(__player.X,self.HookMoveY,__player.X-self.HookMoveX,1)
//			elseif self.HookMoveY<__player.Y
//				Rect(self.HookMove.X,self.HookMove.Y,1,self.HookMoveY-__player.Y)
//			elseif self.HookMoveY>__player.Y
//				Rect(self.HookMove.X,__player.Y,1,__player.Y-self.HookMoveY)
//			end
			__white
		end
	end
	
	void HookOn(int X, int Y)
		int wx
		int wy
		wx = __player.X
		wy = __player.Y
		self.HookMove=false
		bool skip
		bool foundhook
		CSay("Trying to find a Scyndi Hook Spot!")
		repeat
			skip = false
			foundhook = false
			#+ wx X
			#+ wy Y
			CSayF("Testing (%5d,%5d) Mv(%d,%d) ",wx,wy,X,Y)
			for tag in FieldMap.Kthura.EachTag()
				skip = skip or ( prefixed(tag,"ScyndiHook_") and FieldMap.Kthura.InObj(tag,wx,wy) )
				// CSayF("= Checking zone: %s; For Scyndi and in there: %s; Skip: %s",tag,tostring(prefixed(tag,"ScyndiHook_") and FieldMap.Kthura.InObj(tag,wx,wy)),tostring(skip) )
				if prefixed(tag,"ScyndiHookSpot_") 
					foundhook = true
					var m
					m = FieldFlow.Map.Kthura
					m.Obj = tag
					if math.abs(wx-m.ObjInt.X)<30 and math.abs(wy-m.ObjInt.Y)<30
						if X<0
							self.HookMoveX = m.ObjInt.X //+16
							self.HookMoveY = m.ObjInt.Y-16
							self.HookMove  = true
							__player.Y = self.HookMoveY
							__player.MoveTo(self.HookMoveX,self.HookMoveY)
						elseif X>0
							self.HookMoveX = m.ObjInt.X //+16
							self.HookMoveY = m.ObjInt.Y-16
							self.HookMove  = true
							__player.Y = self.HookMoveY
							__player.MoveTo(self.HookMoveX,self.HookMoveY)
						elseif Y<0
							self.HookMoveX = m.ObjInt.X
							self.HookMoveY = m.ObjInt.Y-16
							self.HookMove  = true
							__player.X = self.HookMoveX
							__player.MoveTo(self.HookMoveX,self.HookMoveY+32)
						elseif Y>0
							self.HookMoveX = m.ObjInt.X
							self.HookMoveY = m.ObjInt.Y-16
							self.HookMove  = true
							__player.X = self.HookMoveX
							__player.MoveTo(self.HookMoveX,self.HookMoveY-32)
						end
					end
				end
			end
			if self.HookMove
				return
			end
			if not foundhook
				CSay("No need to keep on scanning if there isn't any hookspot at all in this place!")
				return
			end
		until (not skip) and FieldMap.Kthura.Blocked(wx,wy,true)
	end
	
	bool Click(int but,int x, int y)
		bool ret
		ret = x>self.X and y>self.Y and x<self.X+200 and y<self.Y+200
		if ret
			// left
			if x<self.X+25 and y>self.Y+25 and y<self.Y+175
				self.HookOn(-1, 0)
			// right
			elseif x>self.X-175 and y>self.Y+25 and y<self.Y+175
				self.HookOn( 1, 0)
			// up
			elseif y<self.Y+25 and x>self.X+25 and x<self.X+175
				self.HookOn( 0,-1)
			// down
			elseif y>self.Y+175 and x>self.X+25 and x<self.X+175
				self.HookOn( 0, 1)
			end
		end
		return ret
	end
	
	void CONSTRUCTOR()
		self.Img = LoadImage("GFX/PersAction/Scyndi.png")
		self.X = Screen.Width -300
		self.Y = Screen.Height-400
	end

end