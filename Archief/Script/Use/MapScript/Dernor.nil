// License Information:
// **********************************************
// 
// src/Tricky Script/Script/Use/MapScript/Dernor.nil
// (c) Jeroen Broks, 2020, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 20.04.28
// End License Information
#use "libs/strings"
#use "libs/tables"
#use "libs/xmath"

module ModuleDernorNatureVision

	table Objects
	
	table distances
	
	number Dist(int x1, int y1, int x2, int y2)
		string t
		t = sprintf("%4d.%4d.%4d.%4d",x1,y1,x2,y2)
		self.distances[t] = self.distances[t] or xmath.Pythagoras(x1,y1,x2,y2)
		return self.distances[t]
	end
	
	void Init(int Layers)
		self.Objects = {}
		for i=1,Layers
			string L
			table LT
			L = sprintf("#%03d",i)
			Map.Layer = L
			self.Objects[L]=LT
			for tag in Map.EachTag
				if prefixed(tag,"DernVis") or prefixed(tag,"DernInvis") or prefixed(tag,"VisDern")
					Map.Obj = tag
					LT[#LT+1]={ ['tag']=tag, ['show'] = prefixed(tag,"DernVis") or prefixed(tag,"VisDern"), ['x'] = Map.ObjInt.X, ['y'] = Map.ObjInt.Y, ['last'] = 1234  }
					CSayF("Added %s (layer %s)",tag,L)
					CSay(NIL.LuaSerialize("data",LT[#LT]))
				end
			end
		end
	end
	
	void Update(string L)
		if not self.Objects[L]
			return
		end
		int PX
		int PY
		Map.Obj = "Player"
		PX = Map.ObjInt.X
		PY = Map.ObjInt.Y
		for o in each(self.Objects[L])
			number distance
			number alpha
			// Map.Obj = tag
			if math.abs(PX-o.x)>200 or math.abs(PY-o.y)>200
				alpha = 1000
				distance = 5000
			elseif Map.Leader == "Dernor"
				// distance = xmath.Pythagoras(PX,PY,Map.ObjInt.X,Map.ObjInt.Y)
				distance = self.Dist(PX,PY,o.x,o.y)
				alpha = math.floor(distance) * 5
				//CSayF("Player(%4d,%4d); Object %s(%4d,%4d); Distance(%5.2f); Alpha:%04d",PX,PY,tag,Map.ObjInt.X,Map.ObjInt.Y,distance,alpha)
				if alpha>1000
					alpha = 1000
				elseif alpha<0
					alpha = 0
				end
			else
				alpha = 1000
			end
			if o.last!=distance
				if o.show
					Map.Obj = o.tag
					Map.ObjInt.Alpha = 1000 - alpha
					o.last=distance
				else 
					Map.Obj = o.tag
					Map.ObjInt.Alpha = alpha
					o.last=distance
				end
			end
		end
	end

end