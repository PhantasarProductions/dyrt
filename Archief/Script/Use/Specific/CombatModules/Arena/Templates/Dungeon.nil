// License Information:
// **********************************************
// 
// src/Tricky Script/Script/Use/Specific/CombatModules/Arena/Templates/Dungeon.nil
// (c) Jeroen Broks, 2019, 2021, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 21.01.11
// End License Information

#use "libs/LinkedList"


#pure 
local
#endpure

class Torch
	int x
	int y
	var pic
	int spd
	int skip
	int Frame
	bool animate
	
	static var list
	
	void CONSTRUCTOR()
		self.list.AddLast(self)
		self.Frame = math.random(1,5)
	end
	
	void Draw()
		self.pic.Draw(self.x,(Screen.Height/2)-self.y,self.Frame)
		if self.animate
			self.skip++
			if self.skip>=self.spd
				self.skip=0
				int wtd
				wtd = math.random(1,10)
				switch wtd
					case 1
						if self.spd>7
							self.spd --
						end
					case 2
						if self.spd<12
							self.spd++
						end
				end
			end
			self.Frame++
			if (self.Frame>=self.pic.Frames)
				self.Frame = 0
			end
		end
	end
	
end


module Arena_Dungeon

	bool Torches = true
	bool TorchBurn = true
	bool TorchOff = true	
	get var ImgTorchBurn 
		return LoadIfNew("gfx/Textures/Objects/Toorts/Brandend.jpbf","DungArenaTorchBurning")
	end
	
	get var ImgTorchOff
		return LoadIfNew("gfx/Textures/Objects/Toorts/Uit.png"      ,"DungArenaTorchNotBurning")
	end
	
	link TorchList = Torch.list
	
	string Wall
	string Floor
	
	var ImgWall
	var ImgFloor
	
	void CONSTRUCTOR()
		self.TorchList = new TLinkedList
	end
	
	void Init()
		assert(self.Wall!="" and self.Floor!="","Missing arena data!")
		self.ImgWall  = LoadImage(self.Wall,"CArenaDungWall")
		self.ImgFloor = LoadImage(self.Floor,"CArenaDungFloor")
		// The tags force a C# garbage collecting once other stuff is loaded!
		if self.Torches
			assert(
				self.TorchBurn or self.TorchOff,
				"Invalid torches setting. One of them must be true, or the torches in general must be turned off!"
			)
			int tx
			var trc
			int au
			tx = math.random(64,120)
			repeat			
				trc = new Torch
				trc.x = tx
				trc.y = math.random(20,50)
				trc.spd = math.random(6,12)
				if self.Torches
					bool ok
					repeat
						au = math.random(1,2)
						switch au
							case 1
								if self.TorchBurn
									trc.pic = self.ImgTorchBurn
									trc.animate = true
									ok = true
								end
							case 2
								if self.TorchOff
									trc.pic = self.ImgTorchOff
									trc.animate = false
									ok = true
								end
						end
					until ok
				end
				tx = tx + math.random(60,200)
			until tx >= Screen.Width-64
		end
	end
	
	void Draw()
		int sy
		int ey
		ey = math.floor(Screen.Height/2)
		sy = ey - (4 * 32)
		self.ImgFloor.Tile(0,ey,Screen.Width,ey)
		for y = sy,ey,32
			self.ImgWall.Tile(0,y,Screen.Width,64)
		end
		for trc in Torch.list.Each
			trc.Draw()
		end
	end

end